---
title: Mini Dashboard
format: dashboard
---

## Row {height=15%, columns=4}

```{python}
#| echo: false
import pandas as pd

# Load the cleaned & geocoded HHT homes
df = pd.read_csv("../data/geocoded_hht_homes.csv")

# Compute metrics
num_years     = df.Year.nunique()
num_homes     = df.Address.nunique()
repeat_homes  = (df.Address.value_counts()>1).sum()
unique_owners = df.Owner.nunique()

# Return list of valueboxes
[
  {"title": "Years\nFeatured", "value": num_years,     "icon": "calendar", "color": "primary"},
  {"title": "Total\nHomes",    "value": num_homes,     "icon": "home",     "color": "success"},
  {"title": "Repeat\nVisits",  "value": repeat_homes,  "icon": "refresh",  "color": "warning"},
  {"title": "Unique\nOwners",  "value": unique_owners, "icon": "users",    "color": "info"}
]

```

## Row {height=70%}

```{python}
#| echo: false
import sys, os
sys.path.insert(0, os.path.abspath(".."))

import pandas as pd
import geopandas as gpd
from ipyleaflet import Map, Marker, MarkerCluster, GeoJSON, LayersControl, basemap_to_tiles, basemaps
from fandu.geo_utils import load_shapefile_from_zip

# 1 Load & simplify The Fan boundary
neigh = (
  load_shapefile_from_zip("../data/Neighborhoods-shp.zip")
  .to_crs("EPSG:4326")
)
fan = neigh[neigh["Name"].str.lower().str.strip()=="the fan"].copy()
fan.geometry = fan.geometry.simplify(0.0001, preserve_topology=True)
boundary = fan.unary_union

# 2 Load geocoded homes
df = pd.read_csv("../data/geocoded_hht_homes.csv")
gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.lon, df.lat), crs="EPSG:4326")
homes = gdf[gdf.geometry.within(boundary)]

# 3 Build map
m = Map(
  basemap=basemap_to_tiles(basemaps.OpenStreetMap.Mapnik),
  center=(37.5525, -77.465556), zoom=15
)

# Fan boundary layer
m.add_layer(GeoJSON(
  data=fan.__geo_interface__,
  style={"color":"#1f77b4","fillOpacity":0.1,"weight":2},
  name="Fan Boundary"
))

# Home markers
markers = [
  Marker(location=(r.lat, r.lon), title=f"{r.Address} ({r.Year})")
  for _, r in homes.iterrows()
]
m.add_layer(MarkerCluster(markers=markers, name="Holiday Homes"))

# Toggle control
m.add_control(LayersControl(position="topright"))

m
```

## Row {height=15%}
```{python}
#| echo: false
import pandas as pd

# reload & sort by street
df = pd.read_csv("../data/geocoded_hht_homes.csv")
df["Street"] = df.Address.str.extract(r"\d+\s+(.*)")[0]
tbl = (
  df.sort_values("Street")
    .loc[:, ["Address","Owner","Year"]]
    .reset_index(drop=True)
    .head(20)
)

# display as Markdown table
from tabulate import tabulate
from IPython.display import Markdown
Markdown(tabulate(tbl, headers=tbl.columns, tablefmt="github"))
```
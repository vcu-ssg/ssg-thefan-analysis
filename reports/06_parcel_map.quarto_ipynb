{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Interactive map\n",
        "---"
      ],
      "id": "be8f4a32"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import geopandas as gpd\n",
        "import os\n",
        "import matplotlib as plt\n",
        "\n",
        "import folium\n",
        "from shapely.geometry import mapping\n",
        "import geopandas as gpd\n",
        "\n",
        "# List of base names\n",
        "base_names = [\"Fan District Association\",\"Civic_Associations\", \"Addresses_in_fan\", \"Parcels_in_fan\"]\n",
        "\n",
        "# Folder where GeoJSON files are located\n",
        "geojson_folder = \"../precious/\"\n",
        "features = [\"Addresses\",\"Parcels\"]\n",
        "selector = \"Civic_Associations\"\n",
        "selector_key = \"Fan District Association\"\n",
        "#selector_key = \"West Avenue Improvement Association\"\n",
        "\n",
        "input_folder = \"../data\"\n",
        "\n",
        "# Load files into a dictionary\n",
        "data = {}\n",
        "\n",
        "for name in base_names:\n",
        "    file_path = os.path.join(input_folder, f\"{name}.geojson\")\n",
        "    if os.path.exists(file_path):\n",
        "        data[name] = gpd.read_file(file_path)\n",
        "    else:\n",
        "        print(f\"⚠️ File not found: {file_path}\")\n",
        "\n",
        "#data[selector_key] = data[selector][ data[selector][\"Name\"]==selector_key]"
      ],
      "id": "30548a9a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Interactive Map: Parcels and UnitCounts\n"
      ],
      "id": "d3991575"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Step 1: Filter addresses with UnitType == None\n",
        "addresses = data[\"Addresses_in_fan\"]\n",
        "addresses = addresses[addresses[\"UnitType\"].isna()].copy()\n",
        "\n",
        "# Ensure both are in the same CRS\n",
        "addresses = addresses.to_crs(data[\"Parcels_in_fan\"].crs)\n",
        "\n",
        "# Step 2: Perform spatial join - match addresses within parcels\n",
        "joined = gpd.sjoin(addresses, data[\"Parcels_in_fan\"], how=\"inner\", predicate=\"within\")\n",
        "\n",
        "# Step 3: Group by Parcel ID (or index) and sum UnitCount\n",
        "# Choose a unique key to group by — use index_right if no parcel ID is available\n",
        "parcel_unit_counts = (\n",
        "    joined.groupby(\"index_right\")[\"UnitCount\"]\n",
        "    .sum()\n",
        "    .rename(\"SummedUnitCount\")\n",
        ")\n",
        "\n",
        "# Step 4: Join the result back to Parcels GeoDataFrame\n",
        "parcels_with_units = data[\"Parcels_in_fan\"].copy()\n",
        "parcels_with_units[\"SummedUnitCount\"] = parcel_unit_counts\n",
        "\n",
        "# Optional: fill NaN with 0 for parcels without addresses\n",
        "parcels_with_units[\"SummedUnitCount\"] = parcels_with_units[\"SummedUnitCount\"].fillna(0).astype(int)"
      ],
      "id": "d5824015",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fan_shape = data[selector_key].to_crs(epsg=4326)  # Folium uses WGS84\n",
        "\n",
        "# Compute bounds: [[south, west], [north, east]]\n",
        "minx, miny, maxx, maxy = fan_shape.total_bounds\n",
        "bounds = [[miny, minx], [maxy, maxx]]\n",
        "\n",
        "# Center for initial rendering (optional fallback)\n",
        "center = [(miny + maxy) / 2, (minx + maxx) / 2]\n",
        "\n",
        "# Create map and set bounds\n",
        "m = folium.Map(location=center, zoom_start=15, tiles=\"cartodbpositron\")\n",
        "m.fit_bounds(bounds)\n",
        "\n",
        "# Add neighborhood boundary\n",
        "x = folium.GeoJson(\n",
        "    data[selector_key].geometry,\n",
        "    name=\"The Fan Boundary\",\n",
        "    style_function=lambda x: {\n",
        "        \"color\": \"black\",\n",
        "        \"weight\": 3,\n",
        "        \"fillOpacity\": 0,\n",
        "    }\n",
        ").add_to(m)\n",
        "\n",
        "# Add parcels (lighter gray polygons)\n",
        "x = folium.GeoJson(\n",
        "    data[\"Parcels_in_fan\"].geometry,\n",
        "    name=\"Parcels\",\n",
        "    style_function=lambda x: {\n",
        "        \"color\": \"#999999\",\n",
        "        \"weight\": 0.5,\n",
        "        \"fillOpacity\": 0.4,\n",
        "    },\n",
        ").add_to(m)\n",
        "\n",
        "if 0:\n",
        "\n",
        "    # Step 1: Clip values (saturate above 100)\n",
        "    clip_max = 100\n",
        "    parcels_with_units[\"ClippedUnits\"] = parcels_with_units[\"SummedUnitCount\"].clip(upper=clip_max)\n",
        "\n",
        "    # Step 2: Create colormap from 0 to clip_max\n",
        "    clipped_colormap = cm.linear.YlOrRd_09.scale(0, clip_max)\n",
        "    clipped_colormap.caption = f\"Units per Parcel (capped at {clip_max})\"\n",
        "    clipped_colormap.add_to(m)\n",
        "\n",
        "    # Step 3: Add to map\n",
        "    folium.GeoJson(\n",
        "        parcels_with_units,\n",
        "        name=f\"Units per Parcel (max {clip_max})\",\n",
        "        style_function=lambda feature: {\n",
        "            \"fillColor\": clipped_colormap(feature[\"properties\"][\"ClippedUnits\"])\n",
        "            if feature[\"properties\"][\"ClippedUnits\"] else \"#ffffff\",\n",
        "            \"color\": \"#666666\",\n",
        "            \"weight\": 0.5,\n",
        "            \"fillOpacity\": 0.7,\n",
        "        },\n",
        "#        tooltip=folium.GeoJsonTooltip(\n",
        "#            fields=[\"SummedUnitCount\", \"ClippedUnits\"],\n",
        "#            aliases=[\"Total Units\", f\"Clipped to {clip_max}\"],\n",
        "#            localize=True\n",
        "#        )\n",
        "    ).add_to(m)\n",
        "\n",
        "if 0:\n",
        "\n",
        "    import branca.colormap as cm\n",
        "\n",
        "    colormap = cm.linear.YlOrRd_09.scale(0, parcels_with_units[\"SummedUnitCount\"].max())\n",
        "    colormap.caption = \"Units per Parcel (filtered by UnitType=None)\"\n",
        "    colormap.add_to(m)\n",
        "\n",
        "    x = folium.GeoJson(\n",
        "        parcels_with_units,\n",
        "        name=\"Filtered Unit Density\",\n",
        "        style_function=lambda feature: {\n",
        "            \"fillColor\": colormap(feature[\"properties\"][\"SummedUnitCount\"]) if feature[\"properties\"][\"SummedUnitCount\"] else \"#ffffff\",\n",
        "            \"color\": \"#333333\",\n",
        "            \"weight\": 0.5,\n",
        "            \"fillOpacity\": 0.7,\n",
        "        },\n",
        "        tooltip=folium.GeoJsonTooltip(\n",
        "            fields=[\"ParcelID\", \"SummedUnitCount\"],\n",
        "            aliases=[\"Parcel\", \"Total Units\"],\n",
        "        )\n",
        "    ).add_to(m)\n",
        "\n",
        "if 1:\n",
        "\n",
        "    def classify_unit_bin(unit_count):\n",
        "        if unit_count == 0:\n",
        "            return '0'\n",
        "        elif unit_count == 1:\n",
        "            return '1'\n",
        "        elif unit_count == 2:\n",
        "            return '2'\n",
        "        elif unit_count <= 4:\n",
        "            return '3-4'\n",
        "        elif unit_count <= 10:\n",
        "            return '5-10'\n",
        "        elif unit_count <= 20:\n",
        "            return '11-20'\n",
        "        elif unit_count <= 35:\n",
        "            return '21-35'\n",
        "        else:\n",
        "            return '36+'\n",
        "\n",
        "    # Apply to DataFrame\n",
        "    parcels_with_units[\"UnitBin\"] = parcels_with_units[\"SummedUnitCount\"].apply(classify_unit_bin)\n",
        "\n",
        "    # format dollar values\n",
        "    parcels_with_units[\"FormattedValue\"] = parcels_with_units[\"TotalValue\"].apply( lambda x: f\"${int(x/1000)}k\" if x else \"$0k\" )\n",
        "\n",
        "    # Define bin colors\n",
        "    bin_colors = {\n",
        "        '0':     '#ffffff',   # white\n",
        "        '1':     '#ffffcc',   # light yellow\n",
        "        '2':     '#fd8d3c',   # orange\n",
        "        '3-4':   '#fc4e2a',   # darker orange\n",
        "        '5-10':  '#e31a1c',   # red\n",
        "        '11-20': '#bd0026',   # dark red\n",
        "        '21-35': '#800026',   # deeper red\n",
        "        '36+':   '#4d0018',   # very dark red\n",
        "    }\n",
        "    folium.GeoJson(\n",
        "        parcels_with_units,\n",
        "        name=\"Binned Unit Density\",\n",
        "        style_function=lambda feature: {\n",
        "            \"fillColor\": bin_colors.get(feature[\"properties\"][\"UnitBin\"], \"#cccccc\"),\n",
        "            \"color\": \"#666666\",\n",
        "            \"weight\": 0.5,\n",
        "            \"fillOpacity\": 0.7,\n",
        "        },\n",
        "        tooltip=folium.GeoJsonTooltip(\n",
        "            fields=[\"ParcelID\",\"SummedUnitCount\", \"UnitBin\"],\n",
        "            aliases=[\"ParcelID\",\"Total Units\", \"Bin\"],\n",
        "            localize=False\n",
        "        )\n",
        "    ).add_to(m)"
      ],
      "id": "cae1ed3c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.column-page-inset-right}"
      ],
      "id": "11d2c424"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "m"
      ],
      "id": "4c3d1f8f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n"
      ],
      "id": "15828973"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/john/.cache/pypoetry/virtualenvs/ssg-thefan-analysis-Md-w6cvw-py3.13/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
---
title: Example Dashboard
format: dashboard
---

## Row {height=70%}

```{python}
import sys
sys.path.append("../fandu")  # Ensure the 'fandu' folder is on the PYTHONPATH
from ipyleaflet import Map, basemaps, basemap_to_tiles, Marker, MarkerCluster, GeoJSON, LayersControl, Heatmap
import pandas as pd
import geopandas as gpd
from shapely.geometry import box
from geo_utils import load_shapefile_from_zip
import matplotlib.cm as cm
import matplotlib.colors as mcolors

# ------------------------------
# Create the Base Map
# ------------------------------
lat, lon = 37.5525, -77.465556
m = Map(
    basemap=basemap_to_tiles(basemaps.OpenStreetMap.Mapnik),
    center=(lat, lon),
    zoom=15
)

# ------------------------------
# Load The Fan Boundary and Reproject to EPSG:4326
# ------------------------------
gdf = load_shapefile_from_zip(zip_path="../data/Neighborhoods-shp.zip")
if gdf.crs != "EPSG:4326":
    gdf = gdf.to_crs("EPSG:4326")
fan_gdf = gdf[gdf["Name"].str.strip().str.lower() == "the fan"]
if fan_gdf.empty:
    raise ValueError("No boundary found for 'The Fan'. Please check the shapefile.")
fan_geojson = fan_gdf.__geo_interface__

# Create the GeoJSON layer with a red outline for visibility
fan_layer = GeoJSON(data=fan_geojson, style={"color": "red", "fillOpacity": 0, "weight": 2})
fan_layer.name = "Fan Boundary"
m.add_layer(fan_layer)

# ------------------------------
# Load Geocoded Contacts CSV and Filter by The Fan (Member Data)
# ------------------------------
contacts_csv = "../data/geocoded_contacts.csv"
df_contacts = pd.read_csv(contacts_csv)
if "lat" not in df_contacts.columns or "lon" not in df_contacts.columns:
    raise KeyError("The geocoded contacts CSV must contain 'lat' and 'lon' columns.")

contacts_gdf = gpd.GeoDataFrame(
    df_contacts,
    geometry=gpd.points_from_xy(df_contacts.lon, df_contacts.lat),
    crs="EPSG:4326"
)

# Filter contacts that fall within The Fan boundary
fan_boundary = fan_gdf.unary_union
members_in_fan = contacts_gdf[contacts_gdf.geometry.within(fan_boundary)]
print("Number of members within The Fan:", len(members_in_fan))

# ------------------------------
# Create a MarkerCluster Layer for Individual Member Locations
# ------------------------------
member_markers = [
    Marker(
        location=(row.geometry.y, row.geometry.x),
        draggable=False,
        title=f"{row.get('First name', '')} {row.get('Last name', '')}"
    )
    for idx, row in members_in_fan.iterrows()
]
member_cluster = MarkerCluster(markers=member_markers, name="Member Locations")
m.add_layer(member_cluster)

# ------------------------------
# Placeholder for Business Locations (Empty for now)
# ------------------------------
business_cluster = MarkerCluster(markers=[], name="Business Locations")
m.add_layer(business_cluster)

# ------------------------------
# Create a Grid Heatmap Layer
# ------------------------------
# Determine bounding box of the Fan boundary
minx, miny, maxx, maxy = fan_gdf.total_bounds
# Choose a cell size (adjust as needed; here we divide the width into 20 cells)
cell_size = (maxx - minx) / 20

# Generate grid cells covering the bounding box
grid_cells = []
x = minx
while x < maxx:
    y = miny
    while y < maxy:
        grid_cells.append(box(x, y, x + cell_size, y + cell_size))
        y += cell_size
    x += cell_size

# Create a GeoDataFrame for the grid cells
grid_gdf = gpd.GeoDataFrame({'geometry': grid_cells}, crs="EPSG:4326")
# Keep only grid cells that intersect the Fan boundary (to reduce clutter)
grid_gdf = grid_gdf[grid_gdf.geometry.intersects(fan_boundary)]

# Count number of members within each grid cell
grid_gdf['count'] = grid_gdf.geometry.apply(lambda cell: members_in_fan[members_in_fan.geometry.within(cell)].shape[0])
print("Grid cells created:", len(grid_gdf))

# Define a color scaling function based on count
max_count = grid_gdf['count'].max() if grid_gdf['count'].max() > 0 else 1
norm = mcolors.Normalize(vmin=0, vmax=max_count)
cmap = cm.get_cmap('Reds')
def get_color(count):
    rgba = cmap(norm(count))
    return mcolors.rgb2hex(rgba)

# Define a style function for the grid cells
def style_function(feature):
    count = feature['properties']['count']
    return {"fillColor": get_color(count), "color": "grey", "weight": 1, "fillOpacity": 0.7}

# Convert grid_gdf to GeoJSON
grid_geojson = grid_gdf.__geo_interface__

# Create a GeoJSON layer for the grid heatmap using style_callback instead of style
grid_layer = GeoJSON(data=grid_geojson, style_callback=style_function)
grid_layer.name = "Grid Heatmap"
m.add_layer(grid_layer)

# ------------------------------
# Add Layers Control for Toggling Layers
# ------------------------------
layers_control = LayersControl(position='topright')
m.add_control(layers_control)

m
```

```{python}
import sys
import os

# Add the project root to the Python path
sys.path.append(os.path.abspath("..")) 

import matplotlib.pyplot as plt
from fandu.geo_utils import load_shapefile_from_zip

print("title=",f"City of Richmond Neighborhood Shapefile")
gdf = load_shapefile_from_zip(zip_path="../data/Neighborhoods-shp.zip")

# Extract only "The Fan" boundary
fan_gdf = gdf[gdf["Name"].str.strip().str.lower() == "the fan"]

# Plot all neighborhoods
fig, ax = plt.subplots(figsize=(10, 6))
gdf.plot(ax=ax, edgecolor="black", facecolor="lightgray", alpha=0.5)  # Light gray for all neighborhoods

# Highlight The Fan
fan_gdf.plot(ax=ax, edgecolor="red", facecolor="none", linewidth=2)  # Red outline for The Fan

plt.show()

```

## Row {height=30%}

```{python}
#| content: valuebox
#| title: Parcels
#| icon: pencil
#| color: primary

parcels = 1200
dict(
  value = parcels
)
```

```{python}
#| content: valuebox
#| title: "Addresses"

addresses = 1500

dict(
  icon = "chat",
  color = "primary",
  value = addresses
)
```


```{python}
#| content: valuebox
#| title: "Members for the week"

members = 650
dict(
  icon = "chat",
  color = "primary",
  value = members
)
```
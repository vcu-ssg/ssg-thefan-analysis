---
title: FDA Review
---

This analysis explores a contact member dump of the FDA Wild Apricot database.


```{python}
import numpy as np
import pandas as pd
from tabulate import tabulate
from IPython.display import Markdown

from fandu.utils import load_contacts_csv, filter_contains, list_contacts_markdown, \
    find_duplicate_contacts, filter_contacts, cross_tab_markdown


contacts_csv_filename = "contacts-2025-05-22.csv"

list_contacts_columns = ["Id","Member","Status",{"MembershipLevelName":"Level"},"DisplayName","Email",{"LoginRecency":"Last login"},{"Creation date":"Created"}]

```


```{python}
contacts = load_contacts_csv( contacts_csv_filename )
# Normalize Status column by stripping whitespace and replacing empty strings with NaN
contacts["Status"] = contacts["Status"].astype(str).str.strip()
contacts["Status"] = contacts["Status"].replace({"": pd.NA})

contacts["Address"] = contacts["Address"].astype(str).str.strip()
contacts["Address"] = contacts["Address"].replace({"": pd.NA})

# Strip whitespace safely, without converting NaNs to strings
contacts["Email"] = contacts["Email"].str.strip()
contacts["Email"] = contacts["Email"].replace("", pd.NA)
contacts["HasEmail"] = contacts["Email"].notna()


# Ensure datetime parsing
contacts["Last login date"] = pd.to_datetime(contacts["Last login date"], errors="coerce", utc=True)

# Calculate days since last login
now = pd.Timestamp.now(tz="UTC")
contacts["DaysSinceLastLogin"] = (now - contacts["Last login date"]).dt.days

# Ensure missing values are np.nan (not Python None)
contacts["DaysSinceLastLogin"] = contacts["DaysSinceLastLogin"].astype("float")

# Define bins and labels
#bins = [-1, 30, 90, 180, 365, 730, float("inf")]
#labels = ["0–30 days", "31–90 days", "91–180 days", "181–365 days", "1–2 years", "Over 2 years"]

# Define updated bins and labels
bins = [-1, 30, 90, 180, 365, float("inf")]
labels = ["0–30 days", "31–90 days", "91–180 days", "181–365 days", "1+ years"]


# Apply pd.cut on clean float input
login_recency = pd.cut(
    contacts["DaysSinceLastLogin"],
    bins=bins,
    labels=labels,
    include_lowest=True
)

# Ensure missing values are actually np.nan
login_recency = login_recency.astype("category")

# Add "Never logged in" and fill
login_recency = login_recency.cat.add_categories(["Never logged in"])
login_recency = login_recency.fillna("Never logged in")

# Assign to DataFrame
contacts["LoginRecency"] = login_recency


```


## Fandistrict emails

This table lists the email addresses with "fandistrict.org".

We'll want to verify that these emails exist at our domain, and that they're being routed to the
appropriate person or mail box.

```{python}

filtered = filter_contains(contacts, {"Email": "fandistrict.org"})

list_contacts_markdown( filtered,list_contacts_columns,max_rows=999)


```

## Membership Level vs Status

This table should match the summary membership dashboard on the wild apricot admin interface.

```{python}

# Define the columns of interest
status_col = "Status"
level_col = "MembershipLevelName"

cross_tab_markdown( contacts, level_col, status_col,show_row_totals=True,show_col_totals=True )

```


## Status vs Login recency

How often do people log in?  The next view tables categorize the most recent login date.

```{python}
# Show login recency vs. status (with row and column totals if desired)
cross_tab_markdown(
    contacts,
    row_variable="Status",
    col_variable="LoginRecency",
    show_row_totals=True,
    show_col_totals=True
)
```

## Membership level vs Login recency

```{python}
# Show login recency vs. status (with row and column totals if desired)
cross_tab_markdown(
    contacts,
    row_variable="MembershipLevelName",
    col_variable="LoginRecency",
    show_row_totals=True,
    show_col_totals=True
)
```

## Membership level vs IsMember

This check simply looks for bad data.  How does membership level map to the IsMember flag?  This
status flag is maintained internally by wild apricot, but in some cases, can glitch.

```{python}
# Show login recency vs. status (with row and column totals if desired)
cross_tab_markdown(
    contacts,
    row_variable="MembershipLevelName",
    col_variable="Member",
    show_row_totals=True,
    show_col_totals=True
)
```

## Interesting, let's look at the non-members with Household level

Lapsed members are still members, but with reduced privileges, that is, they can't access
member-only features of the website.  They do however, still receive email notifications, etc.

The records below are in error.  Their status should be switch to "member", while they remain as lapsed.

```{python}


filtered = filter_contacts( contacts, {"MembershipLevelName":"Household","Member":False},logic="and")

list_contacts_markdown( filtered,list_contacts_columns)

```

## Status vs IsMember

Another exploration table.

```{python}
# Show login recency vs. status (with row and column totals if desired)
cross_tab_markdown(
    contacts,
    row_variable="Status",
    col_variable="Member",
    show_row_totals=True,
    show_col_totals=True
)
```


## Duplicate first/last names

Let's take a look at duplicate entries.  Entries in the table share the same first and last name, but
show up in multiple records.  

One can assume that only one of the records is *good*.  But, it's not clear which one is bad.

```{python}

duplicates = find_duplicate_contacts(contacts, key_columns=["FirstName", "LastName"])

list_contacts_markdown( duplicates,list_contacts_columns,max_rows=999)

```


## List members without addresses

Members of the FDA should have valid addresses in the FDA.  Let's look at records without addresses.

This check does NOT evaluate the validity of the address itself.  It only looks for blanks.

```{python}

filtered = filter_contacts(
    contacts,
    criteria={"Address": "", "Member": True},
    logic="and"
)

list_contacts_markdown( filtered,list_contacts_columns,max_rows=999)

```

## Membership status by HasEmail

```{python}
# Show login recency vs. status (with row and column totals if desired)
cross_tab_markdown(
    contacts,
    row_variable="Status",
    col_variable="HasEmail",
    show_row_totals=True,
    show_col_totals=True
)
```

## Membership level by HasEmail

```{python}
# Show login recency vs. status (with row and column totals if desired)
cross_tab_markdown(
    contacts,
    row_variable="MembershipLevelName",
    col_variable="HasEmail",
    show_row_totals=True,
    show_col_totals=True
)
```


## List all contacts without emails

Same check for emails.  Note that members CANNOT log in without a valid email and activated password.

The members below were manually entered, and their membership info manually updated.  They won't receive
emails or meeting announcements.

```{python}

filtered = filter_contacts(
    contacts,
    criteria={"Email": ""},
    logic="and"
)

list_contacts_markdown( filtered,list_contacts_columns,max_rows=999, sort_columns=['MembershipLevelName','DisplayName'])

```

## Complete list of non-members

Let's take a look at the details of non-members.  Are these real records?

```{python}

filtered = filter_contacts( contacts, {"MembershipLevelName":"Unknown"},logic="and")

list_contacts_markdown( filtered,list_contacts_columns,max_rows=999)

```

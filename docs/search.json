[
  {
    "objectID": "05_parcels.html",
    "href": "05_parcels.html",
    "title": "Parcels",
    "section": "",
    "text": "2025-10-02 06:23:38.602 | INFO     | fandu.geo_utils:get_newest_feature_file:29 - re.compile('^Parcels-(\\\\d{4}-\\\\d{2}-\\\\d{2}).*\\\\.geojson$', re.IGNORECASE)\n2025-10-02 06:23:38.603 | INFO     | fandu.geo_utils:get_newest_feature_file:35 - FDA_contacts-2025-09-28.csv\n2025-10-02 06:23:38.603 | INFO     | fandu.geo_utils:get_newest_feature_file:35 - README.md\n2025-10-02 06:23:38.603 | INFO     | fandu.geo_utils:get_newest_feature_file:35 - Addresses-2025-05-16.geojson\n2025-10-02 06:23:38.603 | INFO     | fandu.geo_utils:get_newest_feature_file:35 - National_Historic_Districts-2025-05-18.geojson\n2025-10-02 06:23:38.603 | INFO     | fandu.geo_utils:get_newest_feature_file:35 - Parcels-2025-05-16.geojson\n2025-10-02 06:23:38.603 | INFO     | fandu.geo_utils:get_newest_feature_file:35 - Civic_Associations-2025-05-16.geojson\n2025-10-02 06:23:38.603 | INFO     | fandu.geo_utils:get_newest_feature_file:35 - Neighborhoods-2025-05-16.geojson\n2025-10-02 06:23:38.603 | INFO     | fandu.geo_utils:get_newest_feature_file:35 - Addresses-2025-09-25.geojson\n2025-10-02 06:23:38.603 | INFO     | fandu.geo_utils:get_newest_feature_file:35 - Parcels-2025-09-25.geojson\n2025-10-02 06:23:38.603 | INFO     | fandu.geo_utils:get_newest_feature_file:45 - Parcels-2025-09-25.geojson"
  },
  {
    "objectID": "01_setup.html",
    "href": "01_setup.html",
    "title": "setup",
    "section": "",
    "text": "This is the introduction paragraph. In this file we’re cleaning the data and setting up files for later processing."
  },
  {
    "objectID": "data_sources.html",
    "href": "data_sources.html",
    "title": "Data Sources",
    "section": "",
    "text": "The City of Richmond maintains an arcgis geodata repository called Richmond GeoHub.\nData on the geohub are organized into key areas. For our analysis, we’ll be using the following data sources.\n\nAddresses\n\nAll of the official, mapped inventory of all unit and non-unit-based addresses in the City. Includes only active addresses.\n\nParcels\n\nCity of Richmond property ownership information, mapped by land ownership (parcels).\n\nCivic Associations\n\nRepresents civic organization boundaries in the city of Richmond, Virginia.\n\nNational Historic Districts\n\nRepresents districts and sites that are listed on the National Register of Historic Places (Federal designation) and the Virginia Landmarks Register (State designation).\n\nNeighborhoods\n\nCity of Richmond Neighborhoods.\n\n\nFor our Fan District analysis we will be working with Civic Associations to get the formal boundary of the Fan District Association.\nWe then use that boundary to determine Addresses and Parcels in the Fan District Association"
  },
  {
    "objectID": "01_setup.html#load-files",
    "href": "01_setup.html#load-files",
    "title": "setup",
    "section": "Load files",
    "text": "Load files\n\n# Load the neighborhoods GeoJSON\n# creates data[\"Parcels\"] containing geojson data.\ndata = {}\nfor feature in [selector] + features:\n    geofile = get_newest_file( precious_folder, feature, ext=\".geojson\" )\n    #logger.debug(geofile)\n    logger.info(f\"Found {feature}:  {geofile}\" )\n    data[feature] = gpd.read_file( geofile )\n\n# convert all feature files to same CRS mapping as Civic_Associations\nfor feature in features:\n    data[feature] = data[feature].to_crs( data[selector].crs )\n\nINFO     | __main__:&lt;module&gt;:7 - Found Civic_Associations:  /home/john/projects/ssg-thefan-analysis/precious/Civic_Associations-2025-05-16.geojson\nINFO     | __main__:&lt;module&gt;:7 - Found Addresses:  /home/john/projects/ssg-thefan-analysis/precious/Addresses-2025-09-25.geojson\nINFO     | __main__:&lt;module&gt;:7 - Found Parcels:  /home/john/projects/ssg-thefan-analysis/precious/Parcels-2025-09-25.geojson\n\n\n\nDrop columns\n\n# columns to drop:\nshared_drops = ['CreatedBy','CreatedDate','EditBy','EditDate']\n## file specific column drop mappings\ndrop_columns = {\n    \"Civic_Associations\" : ['OBJECTID'] + shared_drops,\n    \"Addresses\"          : ['OBJECTID'] + shared_drops,\n    \"Parcels\"            : ['OBJECTID'],\n}\nfor feature in [selector] + features:\n    data[feature] = data[feature].drop(columns=drop_columns[feature])\n\n\n\nSpatial join, select only parcels and addresses in the Fan.\n\n# Pull out only FDA from Civic_Associations and store it\ndata[selector_key] = data[selector][ data[selector][\"Name\"] == selector_key ]\n\n# Select only features from the selector_key (FDA).  perform spatial join.\nfor feature in features:\n    predicate = \"overlaps\" if feature==\"Neighborhoods\" else \"within\"\n    data[feature+\"_in_fan\"] = gpd.sjoin(data[feature], data[selector_key], predicate=predicate, how=\"inner\")\n\n\n\nDrop unnecessary columns\n\n# Drop columns created from spatial join\nshared_drops = [\"index_right\",\"AdoptionDate\",\"ChangeDate\",\"Shape__Area\",\"Shape__Length\"]\ndrop_columns = {\n    \"Addresses\"          : ['GlobalID'] + shared_drops,\n    \"Parcels\"            : ['MaskedOwner','GlobalID_left','GlobalID_right'] + shared_drops,\n}\nfor feature in features:\n    feature_name = feature+\"_in_fan\"\n    data[feature_name] = data[feature_name].drop(columns=drop_columns[feature])\n\n\n\nCreate columns and recode columns in Parcels\n\ngdf = data[\"Parcels_in_fan\"]\n\ngdf[\"OwnerOccupied\"] = gdf.apply(\n    lambda row: str(row[\"MailAddress\"]).startswith(str(row[\"AsrLocationBldgNo\"]))\n                and str(row[\"MailCity\"]).upper() == \"RICHMOND\"\n                and str(row[\"MailState\"]).upper() == \"VA\"\n                and str(row[\"MailZip\"]) == \"23220\",\n    axis=1\n).map({True: 1, False: 0})\n\n\n# Rule 1: If PropertyClass contains 'Commercial'\ngdf.loc[gdf[\"PropertyClass\"].str.contains(\"Commercial\", case=False, na=False), \"LandUse\"] = \"Commercial\"\n\n# Rule 2: If PropertyClass contains 'Condo'\ngdf.loc[gdf[\"PropertyClass\"].str.contains(\"Condo\", case=False, na=False), \"LandUse\"] = \"Multi-Family\"\n\ngdf[\"SharedGeometry\"] = gdf.duplicated(subset=\"geometry\", keep=False).astype(int)\n\n# Create FanUse\n\nmapping = {\n    \"Single Family\": \"FanResidential\",\n    \"Multi-Family\": \"FanResidential\",\n    \"Duplex (2 Family)\" : \"FanResidential\",\n    \"Commercial\": \"FanBusiness\",\n    \"Industrial\": \"FanBusiness\",\n    \"Office\" : \"FanBusiness\",\n    \"Institutional\" : \"FanBusiness\",\n    \"Mixed-Use\" : \"FanMixed-Use\"\n}\ngdf[\"FanUse\"] = gdf[\"LandUse\"].map(mapping).fillna(\"FanOther\")\n\n# Ensure PropertyClass is string and safe for NaNs\nmask = gdf[\"PropertyClass\"].fillna(\"\").str.contains(\"vacant|parking|common|garage|storage|tower|space\", case=False, na=False)\n# Apply recode\ngdf.loc[mask, \"FanUse\"] = \"FanOther\"\n\n\n# A new variable to permit easy selecting\n\ngdf[\"FanUseType\"] = \"FanIgnore\"  # default\ngdf.loc[(gdf[\"OwnerOccupied\"] == 1) & (gdf[\"Mailable\"] == 1), \"FanUseType\"] = \"FanOwner\"\ngdf.loc[(gdf[\"OwnerOccupied\"] == 0) & (gdf[\"Mailable\"] == 1), \"FanUseType\"] = \"FanRental\"\n\n# Reset if it's one of the FanOther property classes.\ngdf.loc[mask, \"FanUseType\"] = \"FanIgnore\"\n\n\nmapping = {\n    \"FanResidential\": 1,\n    \"FanBusiness\": 10,\n    \"FanMixed-Use\" : 20,\n    \"FanOther\": 99\n}\ngdf[\"FanUseOrder\"] = gdf[\"FanUse\"].map(mapping).fillna(99)\n\ndata[\"Parcels_in_fan\"] = gdf\n\n\n\nClean columns in Addresses\n\n\nSave Parcels_in_fan and Addresses_in_fan for later use.\n\nfor feature in features:\n    feature_name = feature+\"_in_fan\"\n\n    # store to parquet using pyarror (workflow tip from chatgpt\n    data[feature_name].to_parquet(f\"{feature_name}.parquet\",engine=\"pyarrow\")\n    logger.info(f\"Saving: {feature_name}.parquet\" )\n\n    # create dataframe without spatial geometries and store to CSV\n    gdf = data[feature_name].drop(columns=\"geometry\")\n    gdf.to_csv(f\"{feature_name}.csv\", index=False)\n    logger.info(f\"Saving: {feature_name}.csv\" )\n\nINFO     | __main__:&lt;module&gt;:6 - Saving: Addresses_in_fan.parquet\nINFO     | __main__:&lt;module&gt;:11 - Saving: Addresses_in_fan.csv\nINFO     | __main__:&lt;module&gt;:6 - Saving: Parcels_in_fan.parquet\nINFO     | __main__:&lt;module&gt;:11 - Saving: Parcels_in_fan.csv"
  },
  {
    "objectID": "01_setup.html#drop-columns",
    "href": "01_setup.html#drop-columns",
    "title": "setup",
    "section": "",
    "text": "# columns to drop:\nshared_drops = ['CreatedBy','CreatedDate','EditBy','EditDate']\n## file specific column drop mappings\ndrop_columns = {\n    \"Civic_Associations\" : ['OBJECTID'] + shared_drops,\n    \"Addresses\"          : ['OBJECTID'] + shared_drops,\n    \"Parcels\"            : ['OBJECTID'],\n}\nfor feature in [selector] + features:\n    data[feature] = data[feature].drop(columns=drop_columns[feature])"
  },
  {
    "objectID": "01_setup.html#spatial-join-select-only-parcels-and-addresses-in-the-fan.",
    "href": "01_setup.html#spatial-join-select-only-parcels-and-addresses-in-the-fan.",
    "title": "setup",
    "section": "",
    "text": "# Pull out only FDA from Civic_Associations and store it\ndata[selector_key] = data[selector][ data[selector][\"Name\"] == selector_key ]\n\n# Select only features from the selector_key (FDA).  perform spatial join.\nfor feature in features:\n    predicate = \"overlaps\" if feature==\"Neighborhoods\" else \"within\"\n    data[feature+\"_in_fan\"] = gpd.sjoin(data[feature], data[selector_key], predicate=predicate, how=\"inner\")"
  },
  {
    "objectID": "01_setup.html#save-parcels_in_fan-and-addresses_in_fan-for-later-use.",
    "href": "01_setup.html#save-parcels_in_fan-and-addresses_in_fan-for-later-use.",
    "title": "setup",
    "section": "",
    "text": "for feature in features:\n    feature_name = feature+\"_in_fan\"\n\n    # create dataframe without spatial geometries and store to CSV\n    gdf = data[feature_name].drop(columns=\"geometry\")\n    gdf.to_csv(f\"{feature_name}.csv\", index=False)\n    logger.info(f\"Saving: {feature_name}.csv\" )\n\n    # store to parquet using pyarror (workflow tip from chatgpt\n    data[feature_name].to_parquet(f\"{feature_name}.parquet\",engine=\"pyarrow\")\n    logger.info(f\"Saving: {feature_name}.parquet\" )\n\n2025-09-30 12:10:46.150 | INFO     | __main__:&lt;module&gt;:7 - Saving: Addresses_in_fan.csv\n2025-09-30 12:10:46.177 | INFO     | __main__:&lt;module&gt;:11 - Saving: Addresses_in_fan.parquet\n2025-09-30 12:10:46.211 | INFO     | __main__:&lt;module&gt;:7 - Saving: Parcels_in_fan.csv\n2025-09-30 12:10:46.231 | INFO     | __main__:&lt;module&gt;:11 - Saving: Parcels_in_fan.parquet"
  },
  {
    "objectID": "01_setup.html#parcels",
    "href": "01_setup.html#parcels",
    "title": "setup",
    "section": "Parcels",
    "text": "Parcels\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#addresses",
    "href": "01_setup.html#addresses",
    "title": "setup",
    "section": "Addresses",
    "text": "Addresses\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#drop-unnecessary-columns",
    "href": "01_setup.html#drop-unnecessary-columns",
    "title": "setup",
    "section": "",
    "text": "# Drop columns created from spatial join\nshared_drops = [\"index_right\",\"AdoptionDate\",\"ChangeDate\",\"Shape__Area\",\"Shape__Length\"]\ndrop_columns = {\n    \"Addresses\"          : ['GlobalID'] + shared_drops,\n    \"Parcels\"            : ['MaskedOwner','GlobalID_left','GlobalID_right'] + shared_drops,\n}\nfor feature in features:\n    feature_name = feature+\"_in_fan\"\n    data[feature_name] = data[feature_name].drop(columns=drop_columns[feature])"
  },
  {
    "objectID": "01_setup.html#create-columns-and-recode-columns-in-parcels",
    "href": "01_setup.html#create-columns-and-recode-columns-in-parcels",
    "title": "setup",
    "section": "",
    "text": "gdf = data[\"Parcels_in_fan\"]\n\ngdf[\"OwnerOccupied\"] = gdf.apply(\n    lambda row: str(row[\"MailAddress\"]).startswith(str(row[\"AsrLocationBldgNo\"]))\n                and str(row[\"MailCity\"]).upper() == \"RICHMOND\"\n                and str(row[\"MailState\"]).upper() == \"VA\"\n                and str(row[\"MailZip\"]) == \"23220\",\n    axis=1\n).map({True: 1, False: 0})\n\n\n# Rule 1: If PropertyClass contains 'Commercial'\ngdf.loc[gdf[\"PropertyClass\"].str.contains(\"Commercial\", case=False, na=False), \"LandUse\"] = \"Commercial\"\n\n# Rule 2: If PropertyClass contains 'Condo'\ngdf.loc[gdf[\"PropertyClass\"].str.contains(\"Condo\", case=False, na=False), \"LandUse\"] = \"Multi-Family\"\n\ngdf[\"SharedGeometry\"] = gdf.duplicated(subset=\"geometry\", keep=False).astype(int)\n\n# Create FanUse\n\nmapping = {\n    \"Single Family\": \"FanResidential\",\n    \"Multi-Family\": \"FanResidential\",\n    \"Duplex (2 Family)\" : \"FanResidential\",\n    \"Commercial\": \"FanBusiness\",\n    \"Industrial\": \"FanBusiness\",\n    \"Office\" : \"FanBusiness\",\n    \"Institutional\" : \"FanBusiness\",\n    \"Mixed-Use\" : \"FanMixed-Use\"\n}\ngdf[\"FanUse\"] = gdf[\"LandUse\"].map(mapping).fillna(\"FanOther\")\n\n# Ensure PropertyClass is string and safe for NaNs\nmask = gdf[\"PropertyClass\"].fillna(\"\").str.contains(\"vacant|parking|common|garage|storage|tower|space\", case=False, na=False)\n# Apply recode\ngdf.loc[mask, \"FanUse\"] = \"FanOther\"\n\n\n# A new variable to permit easy selecting\n\ngdf[\"FanUseType\"] = \"FanIgnore\"  # default\ngdf.loc[(gdf[\"OwnerOccupied\"] == 1) & (gdf[\"Mailable\"] == 1), \"FanUseType\"] = \"FanOwner\"\ngdf.loc[(gdf[\"OwnerOccupied\"] == 0) & (gdf[\"Mailable\"] == 1), \"FanUseType\"] = \"FanRental\"\n\n# Reset if it's one of the FanOther property classes.\ngdf.loc[mask, \"FanUseType\"] = \"FanIgnore\"\n\n\nmapping = {\n    \"FanResidential\": 1,\n    \"FanBusiness\": 10,\n    \"FanMixed-Use\" : 20,\n    \"FanOther\": 99\n}\ngdf[\"FanUseOrder\"] = gdf[\"FanUse\"].map(mapping).fillna(99)\n\ndata[\"Parcels_in_fan\"] = gdf"
  },
  {
    "objectID": "01_setup.html#fanuse-by-owneroccupied-and-mailable",
    "href": "01_setup.html#fanuse-by-owneroccupied-and-mailable",
    "title": "setup",
    "section": "FanUse by OwnerOccupied and Mailable",
    "text": "FanUse by OwnerOccupied and Mailable\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)\n    \n\n\n\n\n\n\nFanOwner - Parcel owner address matches building address number, parcel owner zip is 23220, and parcel has mailable USPS address for owner of record.\nFanRental - Parcel owner address doesn’t match building address number. So, parcel owner address is OUTSIDE the Fan. It’s possible that the owner uses a different address for tax bill. NOTE - the parcel database doesn’t contain addresses for these parcels. We don’t have Fan addresses for these parcels, just the address of the tax owner. For example, the address for Joe’s Inn isn’t in parcel database. The parcel owner is outside the Fan.\nFanIgnore - not a mailable address, probably a park, parking lot, common area, etc."
  },
  {
    "objectID": "01_setup.html#landuse-by-owneroccupied",
    "href": "01_setup.html#landuse-by-owneroccupied",
    "title": "setup",
    "section": "LandUse by OwnerOccupied",
    "text": "LandUse by OwnerOccupied\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)\n    \n\n\n\n\n\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#all-parcels",
    "href": "01_setup.html#all-parcels",
    "title": "setup",
    "section": "All Parcels",
    "text": "All Parcels\nUse the Sort field to select subsets of parcels.\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#all-addresses",
    "href": "01_setup.html#all-addresses",
    "title": "setup",
    "section": "All Addresses",
    "text": "All Addresses\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#fanuse-landuse-by-owneroccupied-and-mailable",
    "href": "01_setup.html#fanuse-landuse-by-owneroccupied-and-mailable",
    "title": "setup",
    "section": "FanUse, LandUse by OwnerOccupied and Mailable",
    "text": "FanUse, LandUse by OwnerOccupied and Mailable\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#fanuse-landuse-propertyclass-by-owneroccupied-and-mailable",
    "href": "01_setup.html#fanuse-landuse-propertyclass-by-owneroccupied-and-mailable",
    "title": "setup",
    "section": "FanUse, LandUse, PropertyClass by OwnerOccupied and Mailable",
    "text": "FanUse, LandUse, PropertyClass by OwnerOccupied and Mailable\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#fanuse-by-fanusetype",
    "href": "01_setup.html#fanuse-by-fanusetype",
    "title": "setup",
    "section": "FanUse by FanUseType",
    "text": "FanUse by FanUseType\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)\n    \n\n\n\n\n\n\nFanOwner - Parcel owner address matches building address number, parcel owner zip is 23220, and parcel has mailable USPS address for owner of record. These parcel owners have their tax record mailed to this parcel address, so they’re probably the owner.\nFanRental - Parcel owner address doesn’t match building address number. So, parcel owner address is OUTSIDE the Fan. It’s possible that the owner uses a different address for tax bill. NOTE - the parcel database doesn’t contain addresses for these parcels. We don’t have Fan addresses for these parcels, just the address of the tax owner. For example, the address for Joe’s Inn isn’t in parcel database. The parcel owner is outside the Fan.\nFanIgnore - not a mailable address, probably a park, parking lot, common area, etc."
  },
  {
    "objectID": "01_setup.html#fanuse-landuse-by-fanusetype",
    "href": "01_setup.html#fanuse-landuse-by-fanusetype",
    "title": "setup",
    "section": "FanUse, LandUse by FanUseType",
    "text": "FanUse, LandUse by FanUseType\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#fanuse-landuse-propertyclass-by-fanusetype",
    "href": "01_setup.html#fanuse-landuse-propertyclass-by-fanusetype",
    "title": "setup",
    "section": "FanUse, LandUse, PropertyClass by FanUseType",
    "text": "FanUse, LandUse, PropertyClass by FanUseType\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#load-clean-recode-and-save",
    "href": "01_setup.html#load-clean-recode-and-save",
    "title": "setup",
    "section": "",
    "text": "# Load the neighborhoods GeoJSON\n# creates data[\"Parcels\"] containing geojson data.\ndata = {}\nfor feature in [selector] + features:\n    geofile = get_newest_feature_file( geojson_folder, feature )\n    #logger.debug(geofile)\n    print(f\"Found {feature}:  {geofile}\" )\n    data[feature] = gpd.read_file( geofile )\n\n# convert all feature files to same CRS mapping as Civic_Associations\nfor feature in features:\n    data[feature] = data[feature].to_crs( data[selector].crs )\n\nFound Civic_Associations:  /home/john/projects/ssg-thefan-analysis/precious/Civic_Associations-2025-05-16.geojson\nFound Addresses:  /home/john/projects/ssg-thefan-analysis/precious/Addresses-2025-09-25.geojson\nFound Parcels:  /home/john/projects/ssg-thefan-analysis/precious/Parcels-2025-09-25.geojson\n\n\n\n\n\n\n# columns to drop:\nshared_drops = ['CreatedBy','CreatedDate','EditBy','EditDate']\n## file specific column drop mappings\ndrop_columns = {\n    \"Civic_Associations\" : ['OBJECTID'] + shared_drops,\n    \"Addresses\"          : ['OBJECTID'] + shared_drops,\n    \"Parcels\"            : ['OBJECTID'],\n}\nfor feature in [selector] + features:\n    data[feature] = data[feature].drop(columns=drop_columns[feature])\n\n\n\n\n\n# Pull out only FDA from Civic_Associations and store it\ndata[selector_key] = data[selector][ data[selector][\"Name\"] == selector_key ]\n\n# Select only features from the selector_key (FDA).  perform spatial join.\nfor feature in features:\n    predicate = \"overlaps\" if feature==\"Neighborhoods\" else \"within\"\n    data[feature+\"_in_fan\"] = gpd.sjoin(data[feature], data[selector_key], predicate=predicate, how=\"inner\")\n\n\n\n\n\n# Drop columns created from spatial join\nshared_drops = [\"index_right\",\"AdoptionDate\",\"ChangeDate\",\"Shape__Area\",\"Shape__Length\"]\ndrop_columns = {\n    \"Addresses\"          : ['GlobalID'] + shared_drops,\n    \"Parcels\"            : ['MaskedOwner','GlobalID_left','GlobalID_right'] + shared_drops,\n}\nfor feature in features:\n    feature_name = feature+\"_in_fan\"\n    data[feature_name] = data[feature_name].drop(columns=drop_columns[feature])\n\n\n\n\n\ngdf = data[\"Parcels_in_fan\"]\n\ngdf[\"OwnerOccupied\"] = gdf.apply(\n    lambda row: str(row[\"MailAddress\"]).startswith(str(row[\"AsrLocationBldgNo\"]))\n                and str(row[\"MailCity\"]).upper() == \"RICHMOND\"\n                and str(row[\"MailState\"]).upper() == \"VA\"\n                and str(row[\"MailZip\"]) == \"23220\",\n    axis=1\n).map({True: 1, False: 0})\n\n\n# Rule 1: If PropertyClass contains 'Commercial'\ngdf.loc[gdf[\"PropertyClass\"].str.contains(\"Commercial\", case=False, na=False), \"LandUse\"] = \"Commercial\"\n\n# Rule 2: If PropertyClass contains 'Condo'\ngdf.loc[gdf[\"PropertyClass\"].str.contains(\"Condo\", case=False, na=False), \"LandUse\"] = \"Multi-Family\"\n\ngdf[\"SharedGeometry\"] = gdf.duplicated(subset=\"geometry\", keep=False).astype(int)\n\n# Create FanUse\n\nmapping = {\n    \"Single Family\": \"FanResidential\",\n    \"Multi-Family\": \"FanResidential\",\n    \"Duplex (2 Family)\" : \"FanResidential\",\n    \"Commercial\": \"FanBusiness\",\n    \"Industrial\": \"FanBusiness\",\n    \"Office\" : \"FanBusiness\",\n    \"Institutional\" : \"FanBusiness\",\n    \"Mixed-Use\" : \"FanMixed-Use\"\n}\ngdf[\"FanUse\"] = gdf[\"LandUse\"].map(mapping).fillna(\"FanOther\")\n\n# Ensure PropertyClass is string and safe for NaNs\nmask = gdf[\"PropertyClass\"].fillna(\"\").str.contains(\"vacant|parking|common|garage|storage|tower|space\", case=False, na=False)\n# Apply recode\ngdf.loc[mask, \"FanUse\"] = \"FanOther\"\n\n\n# A new variable to permit easy selecting\n\ngdf[\"FanUseType\"] = \"FanIgnore\"  # default\ngdf.loc[(gdf[\"OwnerOccupied\"] == 1) & (gdf[\"Mailable\"] == 1), \"FanUseType\"] = \"FanOwner\"\ngdf.loc[(gdf[\"OwnerOccupied\"] == 0) & (gdf[\"Mailable\"] == 1), \"FanUseType\"] = \"FanRental\"\n\n# Reset if it's one of the FanOther property classes.\ngdf.loc[mask, \"FanUseType\"] = \"FanIgnore\"\n\n\nmapping = {\n    \"FanResidential\": 1,\n    \"FanBusiness\": 10,\n    \"FanMixed-Use\" : 20,\n    \"FanOther\": 99\n}\ngdf[\"FanUseOrder\"] = gdf[\"FanUse\"].map(mapping).fillna(99)\n\ndata[\"Parcels_in_fan\"] = gdf\n\n\n\n\n\nfor feature in features:\n    feature_name = feature+\"_in_fan\"\n\n    # create dataframe without spatial geometries and store to CSV\n    gdf = data[feature_name].drop(columns=\"geometry\")\n    gdf.to_csv(f\"{feature_name}.csv\", index=False)\n    logger.info(f\"Saving: {feature_name}.csv\" )\n\n    # store to parquet using pyarror (workflow tip from chatgpt\n    data[feature_name].to_parquet(f\"{feature_name}.parquet\",engine=\"pyarrow\")\n    logger.info(f\"Saving: {feature_name}.parquet\" )\n\n2025-09-30 12:57:36.050 | INFO     | __main__:&lt;module&gt;:7 - Saving: Addresses_in_fan.csv\n2025-09-30 12:57:36.107 | INFO     | __main__:&lt;module&gt;:11 - Saving: Addresses_in_fan.parquet\n2025-09-30 12:57:36.147 | INFO     | __main__:&lt;module&gt;:7 - Saving: Parcels_in_fan.csv\n2025-09-30 12:57:36.177 | INFO     | __main__:&lt;module&gt;:11 - Saving: Parcels_in_fan.parquet"
  },
  {
    "objectID": "01_setup.html#examine-parcels",
    "href": "01_setup.html#examine-parcels",
    "title": "setup",
    "section": "Examine Parcels",
    "text": "Examine Parcels\n\nFanUse by FanUseType\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)\n    \n\n\n\n\n\n\nFanOwner - Parcel owner address matches building address number, parcel owner zip is 23220, and parcel has mailable USPS address for owner of record. These parcel owners have their tax record mailed to this parcel address, so they’re probably the owner.\nFanRental - Parcel owner address doesn’t match building address number. So, parcel owner address is OUTSIDE the Fan. It’s possible that the owner uses a different address for tax bill. NOTE - the parcel database doesn’t contain addresses for these parcels. We don’t have Fan addresses for these parcels, just the address of the tax owner. For example, the address for Joe’s Inn isn’t in parcel database. The parcel owner is outside the Fan.\nFanIgnore - not a mailable address, probably a park, parking lot, common area, etc.\n\n\n\nFanUse, LandUse by FanUseType\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)\n    \n\n\n\n\n\n\n\nFanUse, LandUse, PropertyClass by FanUseType\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)\n    \n\n\n\n\n\n\n\nView All Parcels\nUse the Sort field to select subsets of parcels.\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#examine-addresses",
    "href": "01_setup.html#examine-addresses",
    "title": "setup",
    "section": "Examine Addresses",
    "text": "Examine Addresses\n\nView All Addresses\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#view-all-parcels",
    "href": "01_setup.html#view-all-parcels",
    "title": "setup",
    "section": "View All Parcels",
    "text": "View All Parcels\nUse the Sort field to select subsets of parcels.\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#view-all-addresses",
    "href": "01_setup.html#view-all-addresses",
    "title": "setup",
    "section": "View All Addresses",
    "text": "View All Addresses\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#list-of-street-names",
    "href": "01_setup.html#list-of-street-names",
    "title": "setup",
    "section": "List of Street Names",
    "text": "List of Street Names\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#list-count-addresses-by-zipcode",
    "href": "01_setup.html#list-count-addresses-by-zipcode",
    "title": "setup",
    "section": "List count addresses by zipcode",
    "text": "List count addresses by zipcode\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#list-odd-addresses",
    "href": "01_setup.html#list-odd-addresses",
    "title": "setup",
    "section": "List odd addresses",
    "text": "List odd addresses\nThis should return blank. These were cleaned/fixed above.\nshow_result_set(\"\"\"\nselect \n  *\nfrom\n  addresses\nwhere\n  not ZipCode in ('23220','23284')\norder by\n  StreetName,AddressLabel\n\n\"\"\",pageLength=10)\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#list-addresslabels-with-mismatched-addressbase",
    "href": "01_setup.html#list-addresslabels-with-mismatched-addressbase",
    "title": "setup",
    "section": "List AddressLabels with mismatched AddressBase",
    "text": "List AddressLabels with mismatched AddressBase\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#list-addresses-with-mismatched-addressextension",
    "href": "01_setup.html#list-addresses-with-mismatched-addressextension",
    "title": "setup",
    "section": "List Addresses with mismatched AddressExtension",
    "text": "List Addresses with mismatched AddressExtension\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#list-addresses-that-dont-add-up",
    "href": "01_setup.html#list-addresses-that-dont-add-up",
    "title": "setup",
    "section": "List addresses that don’t add up",
    "text": "List addresses that don’t add up\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#list-of-valid-unit-types",
    "href": "01_setup.html#list-of-valid-unit-types",
    "title": "setup",
    "section": "List of valid unit types",
    "text": "List of valid unit types\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#list-of-addresses-with-unittype-in-addresslabel-and-missing-extensionwithunit",
    "href": "01_setup.html#list-of-addresses-with-unittype-in-addresslabel-and-missing-extensionwithunit",
    "title": "setup",
    "section": "List of Addresses with unittype in AddressLabel and missing ExtensionWithUnit",
    "text": "List of Addresses with unittype in AddressLabel and missing ExtensionWithUnit\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#finally-create-interim-table",
    "href": "01_setup.html#finally-create-interim-table",
    "title": "setup",
    "section": "Finally, create interim table",
    "text": "Finally, create interim table"
  },
  {
    "objectID": "01_setup.html#data-dictionary",
    "href": "01_setup.html#data-dictionary",
    "title": "setup",
    "section": "Data Dictionary",
    "text": "Data Dictionary\nPerfect 👍 — here’s a full schema documentation for parcel_address_join_with_flags, structured for readability and ready to drop into a README, Quarto doc, or data dictionary."
  },
  {
    "objectID": "01_setup.html#parcel-attributes",
    "href": "01_setup.html#parcel-attributes",
    "title": "setup",
    "section": "1. Parcel Attributes",
    "text": "1. Parcel Attributes\n(From the Parcels dataset)\n\n\n\n\n\n\n\n\nColumn\nType\nDescription\n\n\n\n\nParcelID\nINTEGER\nUnique parcel identifier in the city GIS.\n\n\nPIN\nVARCHAR\nParcel Identification Number (tax lot ID).\n\n\nCountOfPIN\nINTEGER\nNumber of PINs associated with this parcel (multi-PIN parcels).\n\n\nOwnerName\nVARCHAR\nName of the current owner of the parcel.\n\n\nMailAddress\nVARCHAR\nMailing street address of the owner (may differ from property location).\n\n\nMailCity\nVARCHAR\nCity portion of the owner’s mailing address.\n\n\nMailState\nVARCHAR\nState portion of the owner’s mailing address.\n\n\nMailZip\nVARCHAR\nZIP code of the owner’s mailing address.\n\n\nAssessmentDate\nVARCHAR\nDate of most recent assessment.\n\n\nLandValue\nDOUBLE\nAssessed land value.\n\n\nDwellingValue\nDOUBLE\nAssessed building value.\n\n\nTotalValue\nDOUBLE\nTotal assessed value.\n\n\nLandSqFt\nDOUBLE\nParcel land area in square feet.\n\n\nProvalAsmtNhood\nVARCHAR\nAssessment neighborhood code.\n\n\nTaxExemptCode\nVARCHAR\nTax exemption code (if applicable).\n\n\nPropertyClassID\nVARCHAR\nInternal property classification ID.\n\n\nPropertyClass\nVARCHAR\nHuman-readable property classification (e.g., R Two Story, B Commercial Common Area Main).\n\n\nLandUse\nVARCHAR\nLand use category (e.g., Single Family, Multi-Family, Commercial, Vacant).\n\n\nOwnerOccupied\nBIGINT\nFlag (1/0) if the property is owner-occupied.\n\n\nFanUse\nVARCHAR\nLocal neighborhood-specific use classification.\n\n\nFanUseType\nVARCHAR\nDerived Fan District use type (e.g., FanOwner, FanRenter).\n\n\nFanUseOrder\nBIGINT\nOrdering value for FanUse categories.\n\n\nparcel_geometry\nGEOMETRY\nPolygon geometry of the parcel boundary."
  },
  {
    "objectID": "01_setup.html#address-attributes",
    "href": "01_setup.html#address-attributes",
    "title": "setup",
    "section": "2. Address Attributes",
    "text": "2. Address Attributes\n(From the Addresses dataset)\n\n\n\n\n\n\n\n\nColumn\nType\nDescription\n\n\n\n\nAddressId\nVARCHAR\nUnique address record identifier.\n\n\nAddressLabel\nVARCHAR\nFormatted mailing address (human-readable, e.g. 401 N Robinson St Apt A).\n\n\nBuildingNumber\nVARCHAR\nStreet/building number.\n\n\nStreetDirection\nVARCHAR\nStreet direction (e.g., N, S, E, W).\n\n\nStreetName\nVARCHAR\nStreet name.\n\n\nStreetType\nVARCHAR\nStreet type (e.g., St, Ave, Blvd).\n\n\nExtensionWithUnit\nVARCHAR\nAddress extension (e.g., Rear, Suite, Apt).\n\n\nUnitType\nVARCHAR\nUnit type (e.g., Apt, Unit, Suite).\n\n\nUnitValue\nVARCHAR\nUnit number or identifier.\n\n\nZipCode\nVARCHAR\nPostal ZIP code.\n\n\nMailable\nVARCHAR\n“Yes” if USPS deliverable, “No” otherwise.\n\n\nStatePlaneX\nDOUBLE\nX coordinate (State Plane projection).\n\n\nStatePlaneY\nDOUBLE\nY coordinate (State Plane projection).\n\n\nLatitude\nDOUBLE\nLatitude coordinate (WGS84).\n\n\nLongitude\nDOUBLE\nLongitude coordinate (WGS84).\n\n\naddress_geometry\nGEOMETRY\nPoint geometry of the address location."
  },
  {
    "objectID": "01_setup.html#derived-fields-flags-and-counts",
    "href": "01_setup.html#derived-fields-flags-and-counts",
    "title": "setup",
    "section": "3. Derived Fields (Flags and Counts)",
    "text": "3. Derived Fields (Flags and Counts)\n\n\n\n\n\n\n\n\nColumn\nType\nDescription\n\n\n\n\nis_mailable\nINTEGER\n1 if Mailable = 'Yes', else 0.\n\n\naddress_count\nINTEGER\nNumber of addresses linked to the parcel.\n\n\nmailable_count\nINTEGER\nNumber of mailable addresses linked to the parcel.\n\n\nmatch_category\nVARCHAR\nClassification of parcel–address relationship. Possible values:  - No match  - Single address (mailable)  - Single address (not mailable)  - Multiple addresses (1 mailable)  - Multiple addresses (many mailable)  - Multiple addresses (none mailable)  - Unclassified.\n\n\nexpectation_flag\nVARCHAR\nQuality flag comparing match_category against LandUse expectations. Possible values:  - Expected  - Unexpected  - Review.\n\n\nlabel_parcel_count\nINTEGER\nNumber of distinct parcels sharing the same AddressLabel."
  },
  {
    "objectID": "01_setup.html#row-semantics",
    "href": "01_setup.html#row-semantics",
    "title": "setup",
    "section": "4. Row Semantics",
    "text": "4. Row Semantics\n\nEach row = one parcel–address combination.\nParcels with multiple addresses → appear multiple times.\nAddresses tied to multiple parcels (rare, e.g., condos, common-area splits) → appear multiple times.\nTogether, this table enables analysis at the parcel-level, address-level, or household-level.\n\n\n✅ With this schema, you can:\n\nJoin members (by AddressLabel or AddressId) and check anomalies (expectation_flag).\nCollapse to households (using AddressLabel, label_parcel_count).\nDo penetration analysis across LandUse / PropertyClass.\n\n\n👉 Do you want me to also sketch a schema diagram (like an ERD-style box with key columns and relationships between parcels, addresses, and the join) so you have a visual to drop into documentation?"
  },
  {
    "objectID": "01_setup.html#how-many-rows-share-the-same-addresslabel",
    "href": "01_setup.html#how-many-rows-share-the-same-addresslabel",
    "title": "setup",
    "section": "How many rows share the same AddressLabel?",
    "text": "How many rows share the same AddressLabel?\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  }
]
[
  {
    "objectID": "05_parcels.html",
    "href": "05_parcels.html",
    "title": "Parcels",
    "section": "",
    "text": "2025-09-30 07:14:01.303 | INFO     | __main__:&lt;module&gt;:3 - Loading /home/john/projects/ssg-thefan-analysis/precious/Parcels-2025-09-25.geojson"
  },
  {
    "objectID": "01_setup.html",
    "href": "01_setup.html",
    "title": "setup",
    "section": "",
    "text": "This is the introduction paragraph. In this file we’re cleaning the data and setting up files for later processing."
  },
  {
    "objectID": "data_sources.html",
    "href": "data_sources.html",
    "title": "Data Sources",
    "section": "",
    "text": "The City of Richmond maintains an arcgis geodata repository called Richmond GeoHub.\nData on the geohub are organized into key areas. For our analysis, we’ll be using the following data sources.\n\nAddresses\n\nAll of the official, mapped inventory of all unit and non-unit-based addresses in the City. Includes only active addresses.\n\nParcels\n\nCity of Richmond property ownership information, mapped by land ownership (parcels).\n\nCivic Associations\n\nRepresents civic organization boundaries in the city of Richmond, Virginia.\n\nNational Historic Districts\n\nRepresents districts and sites that are listed on the National Register of Historic Places (Federal designation) and the Virginia Landmarks Register (State designation).\n\nNeighborhoods\n\nCity of Richmond Neighborhoods.\n\n\nFor our Fan District analysis we will be working with Civic Associations to get the formal boundary of the Fan District Association.\nWe then use that boundary to determine Addresses and Parcels in the Fan District Association"
  },
  {
    "objectID": "01_setup.html#load-files",
    "href": "01_setup.html#load-files",
    "title": "setup",
    "section": "Load files",
    "text": "Load files\n\n# Load the neighborhoods GeoJSON\n# creates data[\"Parcels\"] containing geojson data.\ndata = {}\nfor feature in [selector] + features:\n    geofile = get_newest_feature_file( geojson_folder, feature )\n    #logger.debug(geofile)\n    print(f\"Found {feature}:  {geofile}\" )\n    data[feature] = gpd.read_file( geofile )\n\n# convert all feature files to same CRS mapping as Civic_Associations\nfor feature in features:\n    data[feature] = data[feature].to_crs( data[selector].crs )\n\nFound Civic_Associations:  /home/john/projects/ssg-thefan-analysis/precious/Civic_Associations-2025-05-16.geojson\nFound Addresses:  /home/john/projects/ssg-thefan-analysis/precious/Addresses-2025-09-25.geojson\nFound Parcels:  /home/john/projects/ssg-thefan-analysis/precious/Parcels-2025-09-25.geojson\n\n\n\nDrop columns\n\n# columns to drop:\nshared_drops = ['CreatedBy','CreatedDate','EditBy','EditDate']\n## file specific column drop mappings\ndrop_columns = {\n    \"Civic_Associations\" : ['OBJECTID'] + shared_drops,\n    \"Addresses\"          : ['OBJECTID'] + shared_drops,\n    \"Parcels\"            : ['OBJECTID'],\n}\nfor feature in [selector] + features:\n    data[feature] = data[feature].drop(columns=drop_columns[feature])\n\n\n\nSpatial join, select only parcels and addresses in the Fan.\n\n# Pull out only FDA from Civic_Associations and store it\ndata[selector_key] = data[selector][ data[selector][\"Name\"] == selector_key ]\n\n# Select only features from the selector_key (FDA).  perform spatial join.\nfor feature in features:\n    predicate = \"overlaps\" if feature==\"Neighborhoods\" else \"within\"\n    data[feature+\"_in_fan\"] = gpd.sjoin(data[feature], data[selector_key], predicate=predicate, how=\"inner\")\n\n\n\nDrop unnecessary columns\n\n# Drop columns created from spatial join\nshared_drops = [\"index_right\",\"AdoptionDate\",\"ChangeDate\",\"Shape__Area\",\"Shape__Length\"]\ndrop_columns = {\n    \"Addresses\"          : ['GlobalID'] + shared_drops,\n    \"Parcels\"            : ['MaskedOwner','GlobalID_left','GlobalID_right'] + shared_drops,\n}\nfor feature in features:\n    feature_name = feature+\"_in_fan\"\n    data[feature_name] = data[feature_name].drop(columns=drop_columns[feature])\n\n\n\nCreate columns and recode columns in Parcels\n\ngdf = data[\"Parcels_in_fan\"]\n\ngdf[\"OwnerOccupied\"] = gdf.apply(\n    lambda row: str(row[\"MailAddress\"]).startswith(str(row[\"AsrLocationBldgNo\"]))\n                and str(row[\"MailCity\"]).upper() == \"RICHMOND\"\n                and str(row[\"MailState\"]).upper() == \"VA\"\n                and str(row[\"MailZip\"]) == \"23220\",\n    axis=1\n).map({True: 1, False: 0})\n\n\n# Rule 1: If PropertyClass contains 'Commercial'\ngdf.loc[gdf[\"PropertyClass\"].str.contains(\"Commercial\", case=False, na=False), \"LandUse\"] = \"Commercial\"\n\n# Rule 2: If PropertyClass contains 'Condo'\ngdf.loc[gdf[\"PropertyClass\"].str.contains(\"Condo\", case=False, na=False), \"LandUse\"] = \"Multi-Family\"\n\ngdf[\"SharedGeometry\"] = gdf.duplicated(subset=\"geometry\", keep=False).astype(int)\n\n# Create FanUse\n\nmapping = {\n    \"Single Family\": \"FanResidential\",\n    \"Multi-Family\": \"FanResidential\",\n    \"Duplex (2 Family)\" : \"FanResidential\",\n    \"Commercial\": \"FanBusiness\",\n    \"Industrial\": \"FanBusiness\",\n    \"Office\" : \"FanBusiness\",\n    \"Institutional\" : \"FanBusiness\",\n    \"Mixed-Use\" : \"FanMixed-Use\"\n}\ngdf[\"FanUse\"] = gdf[\"LandUse\"].map(mapping).fillna(\"FanOther\")\n\n# Ensure PropertyClass is string and safe for NaNs\nmask = gdf[\"PropertyClass\"].fillna(\"\").str.contains(\"vacant|parking|common|garage|storage|tower|space\", case=False, na=False)\n# Apply recode\ngdf.loc[mask, \"FanUse\"] = \"FanOther\"\n\n\n# A new variable to permit easy selecting\n\ngdf[\"FanUseType\"] = \"FanIgnore\"  # default\ngdf.loc[(gdf[\"OwnerOccupied\"] == 1) & (gdf[\"Mailable\"] == 1), \"FanUseType\"] = \"FanOwner\"\ngdf.loc[(gdf[\"OwnerOccupied\"] == 0) & (gdf[\"Mailable\"] == 1), \"FanUseType\"] = \"FanRental\"\n\n# Reset if it's one of the FanOther property classes.\ngdf.loc[mask, \"FanUseType\"] = \"FanIgnore\"\n\n\nmapping = {\n    \"FanResidential\": 1,\n    \"FanBusiness\": 10,\n    \"FanMixed-Use\" : 20,\n    \"FanOther\": 99\n}\ngdf[\"FanUseOrder\"] = gdf[\"FanUse\"].map(mapping).fillna(99)\n\ndata[\"Parcels_in_fan\"] = gdf\n\n\n\nSave Parcels_in_fan and Addresses_in_fan for later use.\n\nfor feature in features:\n    feature_name = feature+\"_in_fan\"\n\n    # create dataframe without spatial geometries and store to CSV\n    gdf = data[feature_name].drop(columns=\"geometry\")\n    gdf.to_csv(f\"{feature_name}.csv\", index=False)\n    logger.info(f\"Saving: {feature_name}.csv\" )\n\n    # store to parquet using pyarror (workflow tip from chatgpt\n    data[feature_name].to_parquet(f\"{feature_name}.parquet\",engine=\"pyarrow\")\n    logger.info(f\"Saving: {feature_name}.parquet\" )\n\n2025-10-01 08:17:33.765 | INFO     | __main__:&lt;module&gt;:7 - Saving: Addresses_in_fan.csv\n2025-10-01 08:17:33.822 | INFO     | __main__:&lt;module&gt;:11 - Saving: Addresses_in_fan.parquet\n2025-10-01 08:17:33.853 | INFO     | __main__:&lt;module&gt;:7 - Saving: Parcels_in_fan.csv\n2025-10-01 08:17:33.876 | INFO     | __main__:&lt;module&gt;:11 - Saving: Parcels_in_fan.parquet"
  },
  {
    "objectID": "01_setup.html#drop-columns",
    "href": "01_setup.html#drop-columns",
    "title": "setup",
    "section": "",
    "text": "# columns to drop:\nshared_drops = ['CreatedBy','CreatedDate','EditBy','EditDate']\n## file specific column drop mappings\ndrop_columns = {\n    \"Civic_Associations\" : ['OBJECTID'] + shared_drops,\n    \"Addresses\"          : ['OBJECTID'] + shared_drops,\n    \"Parcels\"            : ['OBJECTID'],\n}\nfor feature in [selector] + features:\n    data[feature] = data[feature].drop(columns=drop_columns[feature])"
  },
  {
    "objectID": "01_setup.html#spatial-join-select-only-parcels-and-addresses-in-the-fan.",
    "href": "01_setup.html#spatial-join-select-only-parcels-and-addresses-in-the-fan.",
    "title": "setup",
    "section": "",
    "text": "# Pull out only FDA from Civic_Associations and store it\ndata[selector_key] = data[selector][ data[selector][\"Name\"] == selector_key ]\n\n# Select only features from the selector_key (FDA).  perform spatial join.\nfor feature in features:\n    predicate = \"overlaps\" if feature==\"Neighborhoods\" else \"within\"\n    data[feature+\"_in_fan\"] = gpd.sjoin(data[feature], data[selector_key], predicate=predicate, how=\"inner\")"
  },
  {
    "objectID": "01_setup.html#save-parcels_in_fan-and-addresses_in_fan-for-later-use.",
    "href": "01_setup.html#save-parcels_in_fan-and-addresses_in_fan-for-later-use.",
    "title": "setup",
    "section": "",
    "text": "for feature in features:\n    feature_name = feature+\"_in_fan\"\n\n    # create dataframe without spatial geometries and store to CSV\n    gdf = data[feature_name].drop(columns=\"geometry\")\n    gdf.to_csv(f\"{feature_name}.csv\", index=False)\n    logger.info(f\"Saving: {feature_name}.csv\" )\n\n    # store to parquet using pyarror (workflow tip from chatgpt\n    data[feature_name].to_parquet(f\"{feature_name}.parquet\",engine=\"pyarrow\")\n    logger.info(f\"Saving: {feature_name}.parquet\" )\n\n2025-09-30 12:10:46.150 | INFO     | __main__:&lt;module&gt;:7 - Saving: Addresses_in_fan.csv\n2025-09-30 12:10:46.177 | INFO     | __main__:&lt;module&gt;:11 - Saving: Addresses_in_fan.parquet\n2025-09-30 12:10:46.211 | INFO     | __main__:&lt;module&gt;:7 - Saving: Parcels_in_fan.csv\n2025-09-30 12:10:46.231 | INFO     | __main__:&lt;module&gt;:11 - Saving: Parcels_in_fan.parquet"
  },
  {
    "objectID": "01_setup.html#parcels",
    "href": "01_setup.html#parcels",
    "title": "setup",
    "section": "Parcels",
    "text": "Parcels\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#addresses",
    "href": "01_setup.html#addresses",
    "title": "setup",
    "section": "Addresses",
    "text": "Addresses\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#drop-unnecessary-columns",
    "href": "01_setup.html#drop-unnecessary-columns",
    "title": "setup",
    "section": "",
    "text": "# Drop columns created from spatial join\nshared_drops = [\"index_right\",\"AdoptionDate\",\"ChangeDate\",\"Shape__Area\",\"Shape__Length\"]\ndrop_columns = {\n    \"Addresses\"          : ['GlobalID'] + shared_drops,\n    \"Parcels\"            : ['MaskedOwner','GlobalID_left','GlobalID_right'] + shared_drops,\n}\nfor feature in features:\n    feature_name = feature+\"_in_fan\"\n    data[feature_name] = data[feature_name].drop(columns=drop_columns[feature])"
  },
  {
    "objectID": "01_setup.html#create-columns-and-recode-columns-in-parcels",
    "href": "01_setup.html#create-columns-and-recode-columns-in-parcels",
    "title": "setup",
    "section": "",
    "text": "gdf = data[\"Parcels_in_fan\"]\n\ngdf[\"OwnerOccupied\"] = gdf.apply(\n    lambda row: str(row[\"MailAddress\"]).startswith(str(row[\"AsrLocationBldgNo\"]))\n                and str(row[\"MailCity\"]).upper() == \"RICHMOND\"\n                and str(row[\"MailState\"]).upper() == \"VA\"\n                and str(row[\"MailZip\"]) == \"23220\",\n    axis=1\n).map({True: 1, False: 0})\n\n\n# Rule 1: If PropertyClass contains 'Commercial'\ngdf.loc[gdf[\"PropertyClass\"].str.contains(\"Commercial\", case=False, na=False), \"LandUse\"] = \"Commercial\"\n\n# Rule 2: If PropertyClass contains 'Condo'\ngdf.loc[gdf[\"PropertyClass\"].str.contains(\"Condo\", case=False, na=False), \"LandUse\"] = \"Multi-Family\"\n\ngdf[\"SharedGeometry\"] = gdf.duplicated(subset=\"geometry\", keep=False).astype(int)\n\n# Create FanUse\n\nmapping = {\n    \"Single Family\": \"FanResidential\",\n    \"Multi-Family\": \"FanResidential\",\n    \"Duplex (2 Family)\" : \"FanResidential\",\n    \"Commercial\": \"FanBusiness\",\n    \"Industrial\": \"FanBusiness\",\n    \"Office\" : \"FanBusiness\",\n    \"Institutional\" : \"FanBusiness\",\n    \"Mixed-Use\" : \"FanMixed-Use\"\n}\ngdf[\"FanUse\"] = gdf[\"LandUse\"].map(mapping).fillna(\"FanOther\")\n\n# Ensure PropertyClass is string and safe for NaNs\nmask = gdf[\"PropertyClass\"].fillna(\"\").str.contains(\"vacant|parking|common|garage|storage|tower|space\", case=False, na=False)\n# Apply recode\ngdf.loc[mask, \"FanUse\"] = \"FanOther\"\n\n\n# A new variable to permit easy selecting\n\ngdf[\"FanUseType\"] = \"FanIgnore\"  # default\ngdf.loc[(gdf[\"OwnerOccupied\"] == 1) & (gdf[\"Mailable\"] == 1), \"FanUseType\"] = \"FanOwner\"\ngdf.loc[(gdf[\"OwnerOccupied\"] == 0) & (gdf[\"Mailable\"] == 1), \"FanUseType\"] = \"FanRental\"\n\n# Reset if it's one of the FanOther property classes.\ngdf.loc[mask, \"FanUseType\"] = \"FanIgnore\"\n\n\nmapping = {\n    \"FanResidential\": 1,\n    \"FanBusiness\": 10,\n    \"FanMixed-Use\" : 20,\n    \"FanOther\": 99\n}\ngdf[\"FanUseOrder\"] = gdf[\"FanUse\"].map(mapping).fillna(99)\n\ndata[\"Parcels_in_fan\"] = gdf"
  },
  {
    "objectID": "01_setup.html#fanuse-by-owneroccupied-and-mailable",
    "href": "01_setup.html#fanuse-by-owneroccupied-and-mailable",
    "title": "setup",
    "section": "FanUse by OwnerOccupied and Mailable",
    "text": "FanUse by OwnerOccupied and Mailable\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)\n    \n\n\n\n\n\n\nFanOwner - Parcel owner address matches building address number, parcel owner zip is 23220, and parcel has mailable USPS address for owner of record.\nFanRental - Parcel owner address doesn’t match building address number. So, parcel owner address is OUTSIDE the Fan. It’s possible that the owner uses a different address for tax bill. NOTE - the parcel database doesn’t contain addresses for these parcels. We don’t have Fan addresses for these parcels, just the address of the tax owner. For example, the address for Joe’s Inn isn’t in parcel database. The parcel owner is outside the Fan.\nFanIgnore - not a mailable address, probably a park, parking lot, common area, etc."
  },
  {
    "objectID": "01_setup.html#landuse-by-owneroccupied",
    "href": "01_setup.html#landuse-by-owneroccupied",
    "title": "setup",
    "section": "LandUse by OwnerOccupied",
    "text": "LandUse by OwnerOccupied\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)\n    \n\n\n\n\n\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#all-parcels",
    "href": "01_setup.html#all-parcels",
    "title": "setup",
    "section": "All Parcels",
    "text": "All Parcels\nUse the Sort field to select subsets of parcels.\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#all-addresses",
    "href": "01_setup.html#all-addresses",
    "title": "setup",
    "section": "All Addresses",
    "text": "All Addresses\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#fanuse-landuse-by-owneroccupied-and-mailable",
    "href": "01_setup.html#fanuse-landuse-by-owneroccupied-and-mailable",
    "title": "setup",
    "section": "FanUse, LandUse by OwnerOccupied and Mailable",
    "text": "FanUse, LandUse by OwnerOccupied and Mailable\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#fanuse-landuse-propertyclass-by-owneroccupied-and-mailable",
    "href": "01_setup.html#fanuse-landuse-propertyclass-by-owneroccupied-and-mailable",
    "title": "setup",
    "section": "FanUse, LandUse, PropertyClass by OwnerOccupied and Mailable",
    "text": "FanUse, LandUse, PropertyClass by OwnerOccupied and Mailable\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#fanuse-by-fanusetype",
    "href": "01_setup.html#fanuse-by-fanusetype",
    "title": "setup",
    "section": "FanUse by FanUseType",
    "text": "FanUse by FanUseType\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)\n    \n\n\n\n\n\n\nFanOwner - Parcel owner address matches building address number, parcel owner zip is 23220, and parcel has mailable USPS address for owner of record. These parcel owners have their tax record mailed to this parcel address, so they’re probably the owner.\nFanRental - Parcel owner address doesn’t match building address number. So, parcel owner address is OUTSIDE the Fan. It’s possible that the owner uses a different address for tax bill. NOTE - the parcel database doesn’t contain addresses for these parcels. We don’t have Fan addresses for these parcels, just the address of the tax owner. For example, the address for Joe’s Inn isn’t in parcel database. The parcel owner is outside the Fan.\nFanIgnore - not a mailable address, probably a park, parking lot, common area, etc."
  },
  {
    "objectID": "01_setup.html#fanuse-landuse-by-fanusetype",
    "href": "01_setup.html#fanuse-landuse-by-fanusetype",
    "title": "setup",
    "section": "FanUse, LandUse by FanUseType",
    "text": "FanUse, LandUse by FanUseType\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#fanuse-landuse-propertyclass-by-fanusetype",
    "href": "01_setup.html#fanuse-landuse-propertyclass-by-fanusetype",
    "title": "setup",
    "section": "FanUse, LandUse, PropertyClass by FanUseType",
    "text": "FanUse, LandUse, PropertyClass by FanUseType\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#load-clean-recode-and-save",
    "href": "01_setup.html#load-clean-recode-and-save",
    "title": "setup",
    "section": "",
    "text": "# Load the neighborhoods GeoJSON\n# creates data[\"Parcels\"] containing geojson data.\ndata = {}\nfor feature in [selector] + features:\n    geofile = get_newest_feature_file( geojson_folder, feature )\n    #logger.debug(geofile)\n    print(f\"Found {feature}:  {geofile}\" )\n    data[feature] = gpd.read_file( geofile )\n\n# convert all feature files to same CRS mapping as Civic_Associations\nfor feature in features:\n    data[feature] = data[feature].to_crs( data[selector].crs )\n\nFound Civic_Associations:  /home/john/projects/ssg-thefan-analysis/precious/Civic_Associations-2025-05-16.geojson\nFound Addresses:  /home/john/projects/ssg-thefan-analysis/precious/Addresses-2025-09-25.geojson\nFound Parcels:  /home/john/projects/ssg-thefan-analysis/precious/Parcels-2025-09-25.geojson\n\n\n\n\n\n\n# columns to drop:\nshared_drops = ['CreatedBy','CreatedDate','EditBy','EditDate']\n## file specific column drop mappings\ndrop_columns = {\n    \"Civic_Associations\" : ['OBJECTID'] + shared_drops,\n    \"Addresses\"          : ['OBJECTID'] + shared_drops,\n    \"Parcels\"            : ['OBJECTID'],\n}\nfor feature in [selector] + features:\n    data[feature] = data[feature].drop(columns=drop_columns[feature])\n\n\n\n\n\n# Pull out only FDA from Civic_Associations and store it\ndata[selector_key] = data[selector][ data[selector][\"Name\"] == selector_key ]\n\n# Select only features from the selector_key (FDA).  perform spatial join.\nfor feature in features:\n    predicate = \"overlaps\" if feature==\"Neighborhoods\" else \"within\"\n    data[feature+\"_in_fan\"] = gpd.sjoin(data[feature], data[selector_key], predicate=predicate, how=\"inner\")\n\n\n\n\n\n# Drop columns created from spatial join\nshared_drops = [\"index_right\",\"AdoptionDate\",\"ChangeDate\",\"Shape__Area\",\"Shape__Length\"]\ndrop_columns = {\n    \"Addresses\"          : ['GlobalID'] + shared_drops,\n    \"Parcels\"            : ['MaskedOwner','GlobalID_left','GlobalID_right'] + shared_drops,\n}\nfor feature in features:\n    feature_name = feature+\"_in_fan\"\n    data[feature_name] = data[feature_name].drop(columns=drop_columns[feature])\n\n\n\n\n\ngdf = data[\"Parcels_in_fan\"]\n\ngdf[\"OwnerOccupied\"] = gdf.apply(\n    lambda row: str(row[\"MailAddress\"]).startswith(str(row[\"AsrLocationBldgNo\"]))\n                and str(row[\"MailCity\"]).upper() == \"RICHMOND\"\n                and str(row[\"MailState\"]).upper() == \"VA\"\n                and str(row[\"MailZip\"]) == \"23220\",\n    axis=1\n).map({True: 1, False: 0})\n\n\n# Rule 1: If PropertyClass contains 'Commercial'\ngdf.loc[gdf[\"PropertyClass\"].str.contains(\"Commercial\", case=False, na=False), \"LandUse\"] = \"Commercial\"\n\n# Rule 2: If PropertyClass contains 'Condo'\ngdf.loc[gdf[\"PropertyClass\"].str.contains(\"Condo\", case=False, na=False), \"LandUse\"] = \"Multi-Family\"\n\ngdf[\"SharedGeometry\"] = gdf.duplicated(subset=\"geometry\", keep=False).astype(int)\n\n# Create FanUse\n\nmapping = {\n    \"Single Family\": \"FanResidential\",\n    \"Multi-Family\": \"FanResidential\",\n    \"Duplex (2 Family)\" : \"FanResidential\",\n    \"Commercial\": \"FanBusiness\",\n    \"Industrial\": \"FanBusiness\",\n    \"Office\" : \"FanBusiness\",\n    \"Institutional\" : \"FanBusiness\",\n    \"Mixed-Use\" : \"FanMixed-Use\"\n}\ngdf[\"FanUse\"] = gdf[\"LandUse\"].map(mapping).fillna(\"FanOther\")\n\n# Ensure PropertyClass is string and safe for NaNs\nmask = gdf[\"PropertyClass\"].fillna(\"\").str.contains(\"vacant|parking|common|garage|storage|tower|space\", case=False, na=False)\n# Apply recode\ngdf.loc[mask, \"FanUse\"] = \"FanOther\"\n\n\n# A new variable to permit easy selecting\n\ngdf[\"FanUseType\"] = \"FanIgnore\"  # default\ngdf.loc[(gdf[\"OwnerOccupied\"] == 1) & (gdf[\"Mailable\"] == 1), \"FanUseType\"] = \"FanOwner\"\ngdf.loc[(gdf[\"OwnerOccupied\"] == 0) & (gdf[\"Mailable\"] == 1), \"FanUseType\"] = \"FanRental\"\n\n# Reset if it's one of the FanOther property classes.\ngdf.loc[mask, \"FanUseType\"] = \"FanIgnore\"\n\n\nmapping = {\n    \"FanResidential\": 1,\n    \"FanBusiness\": 10,\n    \"FanMixed-Use\" : 20,\n    \"FanOther\": 99\n}\ngdf[\"FanUseOrder\"] = gdf[\"FanUse\"].map(mapping).fillna(99)\n\ndata[\"Parcels_in_fan\"] = gdf\n\n\n\n\n\nfor feature in features:\n    feature_name = feature+\"_in_fan\"\n\n    # create dataframe without spatial geometries and store to CSV\n    gdf = data[feature_name].drop(columns=\"geometry\")\n    gdf.to_csv(f\"{feature_name}.csv\", index=False)\n    logger.info(f\"Saving: {feature_name}.csv\" )\n\n    # store to parquet using pyarror (workflow tip from chatgpt\n    data[feature_name].to_parquet(f\"{feature_name}.parquet\",engine=\"pyarrow\")\n    logger.info(f\"Saving: {feature_name}.parquet\" )\n\n2025-09-30 12:57:36.050 | INFO     | __main__:&lt;module&gt;:7 - Saving: Addresses_in_fan.csv\n2025-09-30 12:57:36.107 | INFO     | __main__:&lt;module&gt;:11 - Saving: Addresses_in_fan.parquet\n2025-09-30 12:57:36.147 | INFO     | __main__:&lt;module&gt;:7 - Saving: Parcels_in_fan.csv\n2025-09-30 12:57:36.177 | INFO     | __main__:&lt;module&gt;:11 - Saving: Parcels_in_fan.parquet"
  },
  {
    "objectID": "01_setup.html#examine-parcels",
    "href": "01_setup.html#examine-parcels",
    "title": "setup",
    "section": "Examine Parcels",
    "text": "Examine Parcels\n\nFanUse by FanUseType\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)\n    \n\n\n\n\n\n\nFanOwner - Parcel owner address matches building address number, parcel owner zip is 23220, and parcel has mailable USPS address for owner of record. These parcel owners have their tax record mailed to this parcel address, so they’re probably the owner.\nFanRental - Parcel owner address doesn’t match building address number. So, parcel owner address is OUTSIDE the Fan. It’s possible that the owner uses a different address for tax bill. NOTE - the parcel database doesn’t contain addresses for these parcels. We don’t have Fan addresses for these parcels, just the address of the tax owner. For example, the address for Joe’s Inn isn’t in parcel database. The parcel owner is outside the Fan.\nFanIgnore - not a mailable address, probably a park, parking lot, common area, etc.\n\n\n\nFanUse, LandUse by FanUseType\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)\n    \n\n\n\n\n\n\n\nFanUse, LandUse, PropertyClass by FanUseType\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)\n    \n\n\n\n\n\n\n\nView All Parcels\nUse the Sort field to select subsets of parcels.\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#examine-addresses",
    "href": "01_setup.html#examine-addresses",
    "title": "setup",
    "section": "Examine Addresses",
    "text": "Examine Addresses\n\nView All Addresses\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#view-all-parcels",
    "href": "01_setup.html#view-all-parcels",
    "title": "setup",
    "section": "View All Parcels",
    "text": "View All Parcels\nUse the Sort field to select subsets of parcels.\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  },
  {
    "objectID": "01_setup.html#view-all-addresses",
    "href": "01_setup.html#view-all-addresses",
    "title": "setup",
    "section": "View All Addresses",
    "text": "View All Addresses\n\n\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.5.2 from the internet...\n    (need help?)"
  }
]
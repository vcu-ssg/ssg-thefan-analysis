[
  {
    "objectID": "neighborhoods.html",
    "href": "neighborhoods.html",
    "title": "Neighborhood Shapefile",
    "section": "",
    "text": "Display the neighborhood shapefile obtained from the Richmond Geohub."
  },
  {
    "objectID": "neighborhoods.html#shapefile-plot",
    "href": "neighborhoods.html#shapefile-plot",
    "title": "Neighborhood Shapefile",
    "section": "Shapefile plot",
    "text": "Shapefile plot\nBelow is a plot of the boundaries in the shape file. No formatting or cleaning is being done. Later, one can pretty-up the plot by removing axes, adding shape titles or names, etc.\n\n#import os\nimport sys\nimport os\n\n# Add the project root to the Python path\nsys.path.append(os.path.abspath(\"..\")) \n\nimport matplotlib.pyplot as plt\nfrom fandu.geo_utils import load_shapefile_from_zip\n\n# Load the full neighborhood shapefile\ngdf = load_shapefile_from_zip(zip_path=\"../data/Neighborhoods-shp.zip\")\n\n# Extract only \"The Fan\" boundary\nfan_gdf = gdf[gdf[\"Name\"].str.strip().str.lower() == \"the fan\"]\n\n# Plot all neighborhoods\nfig, ax = plt.subplots(figsize=(10, 6))\ngdf.plot(ax=ax, edgecolor=\"black\", facecolor=\"lightgray\", alpha=0.5)  # Light gray for all neighborhoods\n\n# Highlight The Fan\nfan_gdf.plot(ax=ax, edgecolor=\"red\", facecolor=\"none\", linewidth=2)  # Red outline for The Fan\n\nplt.title(\"Richmond Neighborhoods (The Fan Highlighted in Red)\")\nplt.show()"
  },
  {
    "objectID": "neighborhoods.html#shapefile-data",
    "href": "neighborhoods.html#shapefile-data",
    "title": "Neighborhood Shapefile",
    "section": "Shapefile data",
    "text": "Shapefile data\nThe table below lists the regions in the shape file.\n\nfrom tabulate import tabulate\nfrom IPython.display import Markdown\n\n# Display available columns \n#print(\"Available columns:\", gdf.columns)  \n\n# Select relevant columns\ncolumns = [\"ID\", \"Name\", \"District\", \"Class\"]\ntable_data = gdf[columns].values.tolist()\n\n# Generate a Markdown table\nMarkdown(tabulate(table_data, headers=columns ) )\n\n\n\n\nID\nName\nDistrict\nClass\n\n\n\n\nANCL\nAncarows Landing\nOld South\n2\n\n\nBFNT\nBeaufont\nMidlothian\n1\n\n\nISLE\nBelle and Mayo Islands\nDowntown\n3\n\n\nBLMD\nBellemeade\nOld South\n1\n\n\nBLVU\nBellevue\nNorth\n1\n\n\nBMWD\nBelmont Woods\nBroad Rock\n1\n\n\nBCTR\nBelt Center\nMidlothian\n2\n\n\nBIO\nBiotech and MCV District\nDowntown\n2\n\n\nBLKW\nBlackwell\nOld South\n1\n\n\nBRAR\nBrauers\nEast\n1\n\n\nBRCF\nBritish Camp Farms\nBroad Rock\n1\n\n\nBRDR\nBroad Rock\nOld South\n1\n\n\nBRIP\nBroad Rock Industrial Park\nBroad Rock\n2\n\n\nBRSC\nBroad Rock Sports Complex\nBroad Rock\n3\n\n\nBRKB\nBrookbury\nBroad Rock\n1\n\n\nBHRM\nBrookhaven Farms\nBroad Rock\n1\n\n\nBRKP\nBrookland Park\nNorth\n1\n\n\nBRNP\nBryan Park\nNorth\n3\n\n\nBYDP\nByrd Park\nNear West\n1\n\n\nCAP\nCapitol District\nDowntown\n2\n\n\nCARN\nCarillon\nNear West\n1\n\n\nCRVR\nCarver\nNear West\n1\n\n\nCARY\nCarytown\nNear West\n2\n\n\nCDHT\nCedarhurst\nMidlothian\n1\n\n\nCENT\nCentral Office\nDowntown\n2\n\n\nCHIC\nChamberlayne Industrial Center\nNorth\n2\n\n\nCHGD\nCherry Gardens\nBroad Rock\n1\n\n\nCHBZ\nChimborazo\nEast\n1\n\n\nCHFT\nChippenham Forest\nHuguenot\n1\n\n\nCH\nChurch Hill\nEast\n1\n\n\nCHN\nChurch Hill North\nEast\n1\n\n\nCC\nCity Center\nDowntown\n2\n\n\nCOFR\nCofer\nBroad Rock\n1\n\n\nCOLP\nColonial Place\nFar West\n1\n\n\nCRIA\nCommerce Road Industrial Area\nBroad Rock\n2\n\n\nCTLF\nCottrell Farms\nBroad Rock\n1\n\n\nCCOV\nCountry Club of Virginia\nFar West\n3\n\n\nCRGT\nCreighton\nEast\n1\n\n\nCLWD\nCullenwood\nBroad Rock\n1\n\n\nDVGD\nDavee Gardens\nBroad Rock\n1\n\n\nDRBN\nDeerbourne\nBroad Rock\n1\n\n\nEVW\nEastview\nEast\n1\n\n\nEGWD\nEdgewood\nNorth\n1\n\n\nELKH\nElkhardt\nMidlothian\n1\n\n\nFRFD\nFairfield\nEast\n1\n\n\nFRMT\nFairmount\nEast\n1\n\n\nFWNB\nFawnbrook\nBroad Rock\n1\n\n\nFRHL\nForest Hill\nOld South\n1\n\n\nFTHP\nForest Hill Park\nOld South\n3\n\n\nFRHT\nForest Hill Terrace\nOld South\n1\n\n\nFRVW\nForest View\nOld South\n1\n\n\nFLTN\nFulton\nEast\n1\n\n\nGMBH\nGambles Hill\nDowntown\n2\n\n\nGLPN\nGilpin\nNorth\n1\n\n\nGNP\nGinter Park\nNorth\n1\n\n\nGNPT\nGinter Park Terrace\nNorth\n1\n\n\nGRVH\nGravel Hill\nHuguenot\n1\n\n\nGRPK\nGreen Park\nNorth\n1\n\n\nHKHL\nHickory Hill\nBroad Rock\n1\n\n\nHPST\nHighland Park Southern Tip\nNorth\n1\n\n\nHGTR\nHighland Terrace\nNorth\n1\n\n\nHSCT\nHillside Court\nOld South\n1\n\n\nHOKS\nHioaks\nMidlothian\n1\n\n\nHOLL\nHollywood Cemetery\nNear West\n3\n\n\nHGNT\nHuguenot\nHuguenot\n1\n\n\nJKWD\nJackson Ward\nDowntown\n1\n\n\nJHNK\nJahnke\nMidlothian\n1\n\n\nJFDV\nJeff Davis\nBroad Rock\n1\n\n\nJMRL\nJohn Marshall\nNorth\n1\n\n\nLBNP\nLaburnum Park\nNorth\n1\n\n\nMGIC\nMagnolia Industrial Center\nNorth\n2\n\n\nMVGD\nMalvern Gardens\nFar West\n1\n\n\nMNCH\nManchester\nOld South\n1\n\n\nMRMF\nMary Munford\nFar West\n1\n\n\nMRY\nMaury\nOld South\n2\n\n\nMAY\nMaymont\nNear West\n1\n\n\nMAYP\nMaymont Park\nNear West\n3\n\n\nMCG\nMcGuire\nBroad Rock\n1\n\n\nMCGM\nMcGuire Manor\nBroad Rock\n1\n\n\nMCGV\nMcGuire Veterans Hospital\nBroad Rock\n2\n\n\nMDLT\nMidlothian\nMidlothian\n2\n\n\nMNWD\nMonroe Ward\nDowntown\n2\n\n\nMNPK\nMonument Avenue Park\nFar West\n1\n\n\nMSBY\nMosby\nEast\n1\n\n\nMUSM\nMuseums\nNear West\n2\n\n\nNTW\nNewtowne West\nNear West\n1\n\n\nNHP\nNorth Highland Park\nNorth\n1\n\n\nNBHG\nNorthern Barton Heights\nNorth\n1\n\n\nNTHP\nNorthrop\nOld South\n1\n\n\nOKGR\nOak Grove\nOld South\n1\n\n\nOKW\nOakwood\nEast\n1\n\n\nOKWC\nOakwood Cemetery\nEast\n3\n\n\nOTMN\nOld Town Manchester\nOld South\n2\n\n\nORGH\nOregon Hill\nNear West\n1\n\n\nOXFD\nOxford\nHuguenot\n1\n\n\nPNLI\nParnell Industrial Area\nBroad Rock\n2\n\n\nPTPL\nPeter Paul\nEast\n1\n\n\nPINE\nPine Camp\nNorth\n3\n\n\nPNKN\nPiney Knolls\nBroad Rock\n1\n\n\nPCSH\nPocoshock\nMidlothian\n1\n\n\nPWHP\nPowhite Park\nMidlothian\n3\n\n\nPRPK\nProvidence Park\nNorth\n1\n\n\nRDPH\nRandolph\nNear West\n1\n\n\nRDCR\nReedy Creek\nOld South\n1\n\n\nRSDL\nRosedale\nNorth\n1\n\n\nSRGD\nSauer’s Gardens\nFar West\n1\n\n\nSCOT\nScott’s Addition\nNear West\n2\n\n\nSHWP\nSherwood Park\nNorth\n1\n\n\nSHKB\nShockoe Bottom\nEast\n2\n\n\nSHKS\nShockoe Slip\nDowntown\n2\n\n\nSGD\nSouth Garden\nBroad Rock\n1\n\n\nSHPN\nSouthampton\nHuguenot\n1\n\n\nSBHG\nSouthern Barton Heights\nNorth\n1\n\n\nSWD\nSouthwood\nBroad Rock\n1\n\n\nSTAD\nStadium\nNear West\n1\n\n\nSTCT\nStonewall Court\nFar West\n1\n\n\nSTYP\nStony Point\nHuguenot\n2\n\n\nSTFH\nStratford Hills\nHuguenot\n1\n\n\nSWNO\nSwansboro\nOld South\n1\n\n\nSWNW\nSwansboro West\nOld South\n1\n\n\nSWNS\nSwanson\nMidlothian\n1\n\n\nDIAM\nThe Diamond\nNear West\n2\n\n\nFAN\nThe Fan\nNear West\n1\n\n\nMUSD\nThe Museum District\nNear West\n1\n\n\nTCHP\nThree Chopt\nFar West\n1\n\n\nUNHL\nUnion Hill\nEast\n1\n\n\nUR\nUniversity of Richmond\nFar West\n2\n\n\nUSHV\nUpper Shockoe Valley\nEast\n2\n\n\nVCU\nVCU\nNear West\n2\n\n\nVUU\nVirginia Union\nNorth\n1\n\n\nWLMS\nWalmsley\nBroad Rock\n1\n\n\nWARW\nWarwick\nMidlothian\n1\n\n\nWSHP\nWashington Park\nNorth\n1\n\n\nWHMP\nWesthampton\nFar West\n1\n\n\nWLHL\nWestlake Hills\nMidlothian\n1\n\n\nWOVR\nWestover\nMidlothian\n1\n\n\nWSTH\nWestover Hills\nOld South\n1\n\n\nWHW\nWestover Hills West\nMidlothian\n1\n\n\nWHCB\nWhitcomb\nEast\n1\n\n\nWLLN\nWillow lawn\nFar West\n1\n\n\nWLOK\nWillow Oaks\nHuguenot\n1\n\n\nWLTN\nWilton\nFar West\n1\n\n\nWDR\nWindsor\nBroad Rock\n1\n\n\nWDRF\nWindsor Farms\nFar West\n1\n\n\nWDHV\nWoodhaven\nMidlothian\n1\n\n\nWDLH\nWoodland Heights\nOld South\n1\n\n\nWDVL\nWoodville\nEast\n1\n\n\nWTHG\nWorthington\nMidlothian\n1"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Neighborhoods in Richmond - A quick report exploring the GIS shapefile from City of Richmond containing a listing of neighborhoods in the City. The boundary for The Fan can be pulled from here and used to find addresses and parcels located within The fan.\nSample Dashboard - A quick dashboard highlighting some of the dashboard features built into Quarto.\n\nThe top left panel contains a leaflet map of the fan. One can zoom in and out and pan around to explore the city or world.\nThe top right panel contains a display of the neighborhood shapefile downloaded from City of Richmond. Look at the report above for more details.\nthe cards across the bottom contain dummy data and in the code present different ways to create cards.\n\nMini Dashboard - A mini project based on the homes that served as hosts for the “Holiday House Tour” since 1963.\n\nIncludes:\n\nPins on a map highlighting all the addresses\n\nList of addresses sorted by street\nSearch bar to look for specific properties, people, and years\nNumber cards with the number of years, number of homes, and number of homes that participated two or more times."
  },
  {
    "objectID": "index.html#reports",
    "href": "index.html#reports",
    "title": "Welcome!",
    "section": "",
    "text": "Neighborhoods in Richmond - A quick report exploring the GIS shapefile from City of Richmond containing a listing of neighborhoods in the City. The boundary for The Fan can be pulled from here and used to find addresses and parcels located within The fan.\nSample Dashboard - A quick dashboard highlighting some of the dashboard features built into Quarto.\n\nThe top left panel contains a leaflet map of the fan. One can zoom in and out and pan around to explore the city or world.\nThe top right panel contains a display of the neighborhood shapefile downloaded from City of Richmond. Look at the report above for more details.\nthe cards across the bottom contain dummy data and in the code present different ways to create cards.\n\nMini Dashboard - A mini project based on the homes that served as hosts for the “Holiday House Tour” since 1963.\n\nIncludes:\n\nPins on a map highlighting all the addresses\n\nList of addresses sorted by street\nSearch bar to look for specific properties, people, and years\nNumber cards with the number of years, number of homes, and number of homes that participated two or more times."
  },
  {
    "objectID": "cleaning.html",
    "href": "cleaning.html",
    "title": "Export data cleaning",
    "section": "",
    "text": "This report explores an export data file for the Fan District Association looking for data inconsistencies and overall metrics."
  },
  {
    "objectID": "cleaning.html#initial-data-exploration",
    "href": "cleaning.html#initial-data-exploration",
    "title": "Export data cleaning",
    "section": "Initial data exploration",
    "text": "Initial data exploration\n\n\nSkipping ExcelAnalyzer steps."
  },
  {
    "objectID": "cleaning.html#overall-summary-of-records",
    "href": "cleaning.html#overall-summary-of-records",
    "title": "Export data cleaning",
    "section": "Overall summary of records",
    "text": "Overall summary of records\n\nif metrics:\n    metrics.summary()\nelse:\n    print(\"metrics.summary() skipped.\")\n\nmetrics.summary() skipped."
  },
  {
    "objectID": "cleaning.html#user-ids-by-level",
    "href": "cleaning.html#user-ids-by-level",
    "title": "Export data cleaning",
    "section": "User IDs by level",
    "text": "User IDs by level\nOnly records marked with Membership enabled = yes are included in the list.\n\nif metrics:\n    metrics.count_membership_by_level()\nelse:\n    print(\"count_membership_by_level() skipped.\")\n\ncount_membership_by_level() skipped."
  },
  {
    "objectID": "cleaning.html#bundles-by-level",
    "href": "cleaning.html#bundles-by-level",
    "title": "Export data cleaning",
    "section": "Bundles by level",
    "text": "Bundles by level\nA bundle is a group of user ids that share a single membership.\n\nif metrics:\n    metrics.count_bundles_by_level()\nelse:\n    print(\"count_bundles_by_level() skipped.\")\n\ncount_bundles_by_level() skipped."
  },
  {
    "objectID": "cleaning.html#duplicate-emails",
    "href": "cleaning.html#duplicate-emails",
    "title": "Export data cleaning",
    "section": "Duplicate Emails",
    "text": "Duplicate Emails\nBelow is a list of user ID with duplicate emails. This list is most probably clean.\n\nif metrics:\n    metrics.get_users_with_duplicate_emails()\nelse:\n    print(\"get_users_with_duplicate_emails() skipped.\")\n\nget_users_with_duplicate_emails() skipped."
  },
  {
    "objectID": "cleaning.html#duplicate-names",
    "href": "cleaning.html#duplicate-names",
    "title": "Export data cleaning",
    "section": "Duplicate names",
    "text": "Duplicate names\nBelow is a list of members with the same first and last names. Note the Membership enabled” column. If Membership enabled* is yes for both records, then this record is a duplicate.\n\nif metrics:\n    metrics.get_users_with_duplicate_names()\nelse:\n    print(\"get_users_with_duplicate_names() skipped.\")\n\nget_users_with_duplicate_names() skipped."
  },
  {
    "objectID": "cleaning.html#geocoding-excel-file",
    "href": "cleaning.html#geocoding-excel-file",
    "title": "Export data cleaning",
    "section": "Geocoding Excel File",
    "text": "Geocoding Excel File\n\nimport pandas as pd\n\n# Flag to control whether to run geocoding (set to False to use existing CSV)\nRUN_GEOCODING = False\n\nif RUN_GEOCODING:\n    import time\n    from geopy.geocoders import Nominatim\n    from geopy.exc import GeocoderTimedOut\n\n    # Read the Excel file\n    excel_file = \"../data/2025-02-17 Contacts Fan District Association.xls\"\n    df = pd.read_excel(excel_file)\n\n    # Build a full_address column using only \"Address\", \"City\", \"State\", and \"Zip\".\n    def build_full_address(row):\n        parts = []\n        if pd.notnull(row[\"Address\"]):\n            parts.append(str(row[\"Address\"]).strip())\n        if pd.notnull(row[\"City\"]):\n            parts.append(str(row[\"City\"]).strip())\n        if pd.notnull(row[\"State\"]):\n            parts.append(str(row[\"State\"]).strip())\n        if pd.notnull(row[\"Zip\"]):\n            parts.append(str(row[\"Zip\"]).strip())\n        return \", \".join(parts)\n\n    df[\"full_address\"] = df.apply(build_full_address, axis=1)\n    df[\"full_address\"] = df[\"full_address\"].astype(str).str.strip()\n\n    # Initialize the geocoder.\n    geolocator = Nominatim(user_agent=\"fan_district_geocoder\", timeout=10)\n\n    # Define a geocoding function with retry logic.\n    def geocode_address(address, retries=3):\n        for attempt in range(retries):\n            try:\n                time.sleep(1)  # Respect rate limits.\n                location = geolocator.geocode(address)\n                if location:\n                    return location.latitude, location.longitude\n                else:\n                    return None, None\n            except GeocoderTimedOut:\n                time.sleep(2)\n            except Exception:\n                return None, None\n        return None, None\n\n    # Geocode each address.\n    geocoded = df[\"full_address\"].apply(geocode_address)\n    df[\"lat\"] = geocoded.apply(lambda x: x[0])\n    df[\"lon\"] = geocoded.apply(lambda x: x[1])\n\n    # Drop rows where geocoding failed.\n    df = df.dropna(subset=[\"lat\", \"lon\"])\n\n    # Write the results to a CSV file.\n    output_csv = \"../data/geocoded_contacts.csv\"\n    df[[\"full_address\", \"lat\", \"lon\"]].to_csv(output_csv, index=False)\n    print(f\"Geocoded CSV file saved as {output_csv}\")\nelse:\n    print(\"Skipping geocoding; using previously generated CSV.\")\n\n# =============================================================================\n# Load the previously generated CSV and display its head.\n# =============================================================================\ndf_verified = pd.read_csv(\"../data/geocoded_contacts.csv\")\ndf_verified.head()\n\nSkipping geocoding; using previously generated CSV.\n\n\n\n\n\n\n\n\n\nfull_address\nlat\nlon\n\n\n\n\n0\n1523 Hanover Ave., Richmond, VA, 23220\n37.550554\n-77.458961\n\n\n1\n2120 Hanover Ave, Richmond, VA, 23220\n37.553504\n-77.465995\n\n\n2\n1827 Grove Ave, Richmond, VA, 23220\n37.550732\n-77.463385\n\n\n3\n6 S Vine Street, Richmond, VA, 23220\n37.547346\n-77.462680\n\n\n4\n1901 Floyd Avenue, Richmond, VA, 23220\n37.549737\n-77.464212"
  },
  {
    "objectID": "10_hhc_cleaning.html",
    "href": "10_hhc_cleaning.html",
    "title": "Cleaning the Holiday House Tour data",
    "section": "",
    "text": "import pandas as pd\nimport time, os\n\n# Toggle this to True the first time you want to geocode;\n# after that, leave it False so you don’t re-hit the API.\nRUN_GEOCODING = False\n\n# Paths\nCLEAN_CSV     = \"../data/cleaned_hht_homes.csv\"\nGEOCODED_CSV  = \"../data/geocoded_hht_homes.csv\"\n\nif RUN_GEOCODING:\n    from geopy.geocoders import Nominatim\n    from geopy.exc import GeocoderTimedOut\n\n    # Load the free-form cleaned file\n    df = pd.read_csv(CLEAN_CSV)\n\n    # Build a full address string for geocoding\n    def build_full_address(addr):\n        return f\"{addr}, Richmond, VA\"\n\n    df[\"full_address\"] = df[\"Address\"].astype(str).apply(build_full_address)\n\n    # Initialize Nominatim once\n    geolocator = Nominatim(user_agent=\"hht_geocoder\", timeout=10)\n\n    # Geocode with simple retry logic\n    def geocode_address(address, retries=3):\n        for _ in range(retries):\n            try:\n                time.sleep(1)  # 1 sec between queries to respect rate limits\n                loc = geolocator.geocode(address)\n                if loc:\n                    return loc.latitude, loc.longitude\n            except GeocoderTimedOut:\n                time.sleep(2)\n        return (None, None)\n\n    # Apply geocoding\n    coords = df[\"full_address\"].apply(geocode_address)\n    df[[\"lat\", \"lon\"]] = pd.DataFrame(coords.tolist(), index=df.index)\n\n    # Drop any failures\n    df = df.dropna(subset=[\"lat\", \"lon\"])\n\n    # Save for your dashboard\n    df.to_csv(GEOCODED_CSV, index=False)\n    print(f\"✅ Geocoded and saved to {GEOCODED_CSV}\")\nelse:\n    if not os.path.exists(GEOCODED_CSV):\n        raise FileNotFoundError(f\"No geocoded file found at {GEOCODED_CSV}; set RUN_GEOCODING=True once.\")\n    print(\"Skipping geocoding; using existing geocoded_hht_homes.csv\")\n\n# Preview the first few rows\ndf = pd.read_csv(GEOCODED_CSV)\ndf.head()\n\nSkipping geocoding; using existing geocoded_hht_homes.csv\n\n\n\n\n\n\n\n\n\nYear\nAddress\nOwner\nfull_address\nlat\nlon\n\n\n\n\n0\n1963\n307 N. Allen Ave.\nMr. & Mrs. Richard (Ann) Velz\n307 N. Allen Ave., Richmond, VA\n37.552218\n-77.460972\n\n\n1\n1963\n1825 Grove Ave.\nMr. & Mrs. William (Anne) Carleton\n1825 Grove Ave., Richmond, VA\n37.550715\n-77.463318\n\n\n2\n1963\n1914 Grove Ave.\nMrs. Louise Fowlkes & Miss Dorothy Daniels\n1914 Grove Ave., Richmond, VA\n37.551485\n-77.463947\n\n\n3\n1963\n2109 Hanover Ave.\nMr. & Mrs. Charles (Jed) (Betty) Wilson\n2109 Hanover Ave., Richmond, VA\n37.552972\n-77.465737\n\n\n4\n1963\n1714 Park Ave.\nMr. & Mrs. Dallas (Elizabeth) Coons\n1714 Park Ave., Richmond, VA\n37.552658\n-77.460287"
  },
  {
    "objectID": "10_hhc_cleaning.html#geocoding-excel-hht-file-mini-dashboard",
    "href": "10_hhc_cleaning.html#geocoding-excel-hht-file-mini-dashboard",
    "title": "Cleaning the Holiday House Tour data",
    "section": "",
    "text": "import pandas as pd\nimport time, os\n\n# Toggle this to True the first time you want to geocode;\n# after that, leave it False so you don’t re-hit the API.\nRUN_GEOCODING = False\n\n# Paths\nCLEAN_CSV     = \"../data/cleaned_hht_homes.csv\"\nGEOCODED_CSV  = \"../data/geocoded_hht_homes.csv\"\n\nif RUN_GEOCODING:\n    from geopy.geocoders import Nominatim\n    from geopy.exc import GeocoderTimedOut\n\n    # Load the free-form cleaned file\n    df = pd.read_csv(CLEAN_CSV)\n\n    # Build a full address string for geocoding\n    def build_full_address(addr):\n        return f\"{addr}, Richmond, VA\"\n\n    df[\"full_address\"] = df[\"Address\"].astype(str).apply(build_full_address)\n\n    # Initialize Nominatim once\n    geolocator = Nominatim(user_agent=\"hht_geocoder\", timeout=10)\n\n    # Geocode with simple retry logic\n    def geocode_address(address, retries=3):\n        for _ in range(retries):\n            try:\n                time.sleep(1)  # 1 sec between queries to respect rate limits\n                loc = geolocator.geocode(address)\n                if loc:\n                    return loc.latitude, loc.longitude\n            except GeocoderTimedOut:\n                time.sleep(2)\n        return (None, None)\n\n    # Apply geocoding\n    coords = df[\"full_address\"].apply(geocode_address)\n    df[[\"lat\", \"lon\"]] = pd.DataFrame(coords.tolist(), index=df.index)\n\n    # Drop any failures\n    df = df.dropna(subset=[\"lat\", \"lon\"])\n\n    # Save for your dashboard\n    df.to_csv(GEOCODED_CSV, index=False)\n    print(f\"✅ Geocoded and saved to {GEOCODED_CSV}\")\nelse:\n    if not os.path.exists(GEOCODED_CSV):\n        raise FileNotFoundError(f\"No geocoded file found at {GEOCODED_CSV}; set RUN_GEOCODING=True once.\")\n    print(\"Skipping geocoding; using existing geocoded_hht_homes.csv\")\n\n# Preview the first few rows\ndf = pd.read_csv(GEOCODED_CSV)\ndf.head()\n\nSkipping geocoding; using existing geocoded_hht_homes.csv\n\n\n\n\n\n\n\n\n\nYear\nAddress\nOwner\nfull_address\nlat\nlon\n\n\n\n\n0\n1963\n307 N. Allen Ave.\nMr. & Mrs. Richard (Ann) Velz\n307 N. Allen Ave., Richmond, VA\n37.552218\n-77.460972\n\n\n1\n1963\n1825 Grove Ave.\nMr. & Mrs. William (Anne) Carleton\n1825 Grove Ave., Richmond, VA\n37.550715\n-77.463318\n\n\n2\n1963\n1914 Grove Ave.\nMrs. Louise Fowlkes & Miss Dorothy Daniels\n1914 Grove Ave., Richmond, VA\n37.551485\n-77.463947\n\n\n3\n1963\n2109 Hanover Ave.\nMr. & Mrs. Charles (Jed) (Betty) Wilson\n2109 Hanover Ave., Richmond, VA\n37.552972\n-77.465737\n\n\n4\n1963\n1714 Park Ave.\nMr. & Mrs. Dallas (Elizabeth) Coons\n1714 Park Ave., Richmond, VA\n37.552658\n-77.460287"
  },
  {
    "objectID": "30_holiday_house_tour.html",
    "href": "30_holiday_house_tour.html",
    "title": "Holiday House Tour",
    "section": "",
    "text": "this is a test"
  }
]